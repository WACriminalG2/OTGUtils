{
	"$id": "https://cdn.jsdelivr.net/gh/S-K-Tiger/PackdevUtils@main/Schema/origins/layer.json",
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "Origins power JSON schema by S_K_Tiger",
	"description": "See https://origins.readthedocs.io/en/latest/json/power/ if you have any questions.\nFound any mistakes? Open a issue at https://github.com/S-K-Tiger/PackdevUtils/issues",
	"type": "object",
	"properties": {
		"type": {
			"type": "string",
			"description": "The namespace and ID of the desired Power Type.\nSee https://origins.readthedocs.io/en/latest/types/power_types/",
			"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
			"examples": [
				"origins:attribute_modify_transfer", "origins:attribute", "origins:burn", "origins:climbing", "origins:conditioned_attribute",
				"origins:conditioned_restrict_armor", "origins:cooldown", "origins:creative_flight", "origins:damage_over_time",
				"origins:disable_regen", "origins:effect_immunity", "origins:elytra_flight", "origins:entity_glow",
				"origins:entity_group", "origins:exhaust", "origins:fire_immunity", "origins:fire_projectile", "origins:freeze",
				"origins:ignore_water", "origins:inventory", "origins:invisibility", "origins:invulnerability", "origins:item_on_item",
				"origins:keep_inventory", "origins:launch", "origins:lava_vision", "origins:model_color", "origins:multiple",
				"origins:night_vision", "origins:overlay", "origins:particle", "origins:phasing", "origins:recipe", "origins:resource",
				"origins:restrict_armor", "origins:self_glow", "origins:shader", "origins:shaking", "origins:simple",
				"origins:stacking_status_effect", "origins:starting_equipment", "origins:status_bar_texture", "origins:swimming",
				"origins:toggle_night_vision", "origins:toggle", "origins:tooltip", "origins:walk_on_fluid",

				"origins:action_on_being_used", "origins:action_on_block_break", "origins:action_on_block_use", "origins:action_on_callback",
				"origins:action_on_entity_use", "origins:action_on_hit", "origins:action_on_item_use", "origins:action_on_land",
				"origins:action_on_wake_up", "origins:action_over_time", "origins:action_when_damage_taken", "origins:action_when_hit",
				"origins:active_self", "origins:attacker_action_when_hit", "origins:self_action_on_hit", "origins:self_action_on_kill",
				"origins:self_action_when_hit", "origins:target_action_on_hit",

				"origins:modify_air_speed", "origins:modify_block_render", "origins:modify_break_speed", "origins:modify_camera_submersion",
				"origins:modify_crafting", "origins:modify_damage_dealt", "origins:modify_damage_taken", "origins:modify_exhaustion",
				"origins:modify_falling", "origins:modify_fluid_render", "origins:modify_food", "origins:modify_harvest", "origins:modify_jump",
				"origins:modify_lava_speed", "origins:modify_player_spawn", "origins:modify_projectile_damage", "origins:modify_slipperiness",
				"origins:modify_status_effect_amplifier", "origins:modify_status_effect_duration", "origins:modify_swim_speed",
				"origins:modify_xp_gain",

				"origins:prevent_being_used", "origins:prevent_block_selection", "origins:prevent_block_use", "origins:prevent_death",
				"origins:prevent_elytra_flight", "origins:prevent_entity_collision", "origins:prevent_entity_render", "origins:prevent_entity_use",
				"origins:prevent_feature_render", "origins:prevent_game_event", "origins:prevent_item_use", "origins:prevent_sleep"
			]
		},
		"name": {
			"type": "string",
			"description": "The display name of the power. Can be a literal string or a translation key."
		},
		"description": {
			"type": "string",
			"description": "The description of the power. Can be a literal string or a translation key."
		},
		"hidden": {
			"type": "boolean",
			"description": "If set to true, this power will not be displayed in the power list of the origin.",
			"default": false
		},
		"condition": {
			"$ref": "#/definitions/conditions/properties/entity_condition",
			"description": "If set, this power will only be active when the player with this power fulfills the condition."
		},
		"loading_priority": {
			"type": "integer",
			"description": "Specifies when this power is loaded. Higher numbers mean it's loaded later, which means it will override those with lower loading priorities which share the same ID.",
			"default": 0
		},
		"badges": {
			"type": "array",
			"description": "If set, it will display icon(s) after the name of the power.\nSee https://origins.readthedocs.io/en/latest/types/data_types/badge/",
			"items": {
				"description": "An Object which displays an icon just after the name of a power in the power list from the Origins GUI.",
				"properties": {
					"sprite": {
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"description": "ID of the texture to be displayed as an icon. See https://origins.readthedocs.io/en/latest/misc/extras/sprites/ for a list of files included by default in the mod.",
						"examples": ["origins:textures/gui/badge/active.png", "origins:textures/gui/badge/arrow_up.png", "origins:textures/gui/badge/info.png", "origins:textures/gui/badge/star.png", "origins:textures/gui/badge/toggle.png"]
					},
					"text": {
						"type": "string",
						"description": "The string to display when you hover over the icon."
					}
				},
				"required": ["sprite", "text"],
				"examples": [
					[{"sprite": "minecraft:textures/block/dirt.png","text": "I'm a dirt badge!"}],
					[{"sprite": "origins:textures/gui/badge/star.png","text": "Look mum, I have a star!"},{"sprite": "origins:textures/gui/badge/info.png","text": "And yes, you can have multiple badges!"}]
				]
			}
		}
	},
	"required": ["type"],
	"definitions": {
		"conditions": {
			"type": "object",
			"description": "Group for conditions",
			"properties": {
				"bientity_condition": {
					"type": "object",
					"description": "Bi-entity Condition Types operate on a Pair<Entity, Entity>, or in simpler terms: an actor and a target. The actor and target is determined depending on the used power type, and can be swapped. These are available to power/condition types that provides a bientity_condition object field.\nSee https://origins.readthedocs.io/en/latest/types/bientity_condition_types/",
					"properties": {
						"type": {
							"type": "string",
							"description": "ID and namespace of the bientity condition to evaluate.\nSee https://origins.readthedocs.io/en/latest/types/bientity_condition_types/",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
							"examples": [
								"origins:and", "origins:or", "origins:constant",
								"origins:actor_condition", "origins:both", "origins:either", "origins:invert",
								"origins:target_condition", "origins:undirected",
								"origins:attack_target", "origins:attacker", "origins:can_see",
								"origins:distance", "origins:owner", "origins:relative_rotation",
								"origins:riding_recursive", "origins:riding_root", "origins:riding"
							]
						},
						"inverted": {
							"type": "boolean",
							"description": "If true, the condition acts inverted.",
							"default": false
						}
					},
					"required": ["type"],
					"allOf": [
						{
							"$comment": "#region meta",
							"if": {
								"properties": { "type": {"const":"origins:and"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "All of these conditions have to be fulfilled in order for this condition to be fulfilled.\nSee https://origins.readthedocs.io/en/latest/types/meta_condition_types/and/",
										"items": {"$ref": "#/definitions/conditions/properties/bientity_condition"},
										"minItems": 1
									}
								},
								"required": ["conditions"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:constant"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"value": {
										"type": "boolean",
										"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled.\nSee https://origins.readthedocs.io/en/latest/types/meta_condition_types/constant/"
									}
								},
								"required": ["value"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:or"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "Any of these condition types have to be fulfilled in order for this condition to be fulfilled.\nSee https://origins.readthedocs.io/en/latest/types/meta_condition_types/or/",
										"items": { "$ref": "#/definitions/conditions/properties/bientity_condition" },
										"minItems": 1
									}
								},
								"required": ["conditions"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:actor_condition"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"condition": {
										"$ref": "#/definitions/conditions/properties/entity_condition",
										"description": "The entity condition type to check for on the acting entity.\nSee https://origins.readthedocs.io/en/latest/types/bientity_condition_types/actor_condition/"
									}
								},
								"required": ["condition"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:both"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"condition": {
										"$ref": "#/definitions/conditions/properties/entity_condition",
										"description": "The entity condition type to check on both the actor and target entity.\nSee https://origins.readthedocs.io/en/latest/types/bientity_condition_types/both/"
									}
								},
								"required": ["condition"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:either"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"condition": {
										"$ref": "#/definitions/conditions/properties/entity_condition",
										"description": "The entity condition type to check on either actor or target entities.\nSee https://origins.readthedocs.io/en/latest/types/bientity_condition_types/either/"
									}
								},
								"required": ["condition"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:invert"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"condition": {
										"$ref": "#/definitions/conditions/properties/bientity_condition",
										"description": "The bi-entity condition type to check which will have its 'target' and 'actor' contexts swapped.\nSee https://origins.readthedocs.io/en/latest/types/bientity_condition_types/invert/"
									}
								},
								"required": ["condition"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:target_condition"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"condition": {
										"$ref": "#/definitions/conditions/properties/entity_condition",
										"description": "The entity condition type to check for on the target entity.\nSee https://origins.readthedocs.io/en/latest/types/bientity_condition_types/target_condition/"
									}
								},
								"required": ["condition"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:undirected"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"condition": {
										"$ref": "#/definitions/conditions/properties/bientity_condition",
										"description": "The bi-entity condition type to check for.\nSee https://origins.readthedocs.io/en/latest/types/bientity_condition_types/undirected/"
									}
								},
								"required": ["condition"]
							},
							"$comment": "#endregion meta"
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:can_see"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/bientity_condition_types/can_see/"
							},
							"then": {
								"properties": {
									"shape_type": {
										"description": "Determines how the ray-cast will handle blocks.\nSee https://origins.readthedocs.io/en/latest/misc/extras/shape_types/",
										"enum": ["collider", "outline", "visual"],
										"default": "visual"
									},
									"fluid_handling": {
										"description": "Determines how the ray-cast will handle fluids.\nSee https://origins.readthedocs.io/en/latest/misc/extras/fluid_handling/",
										"enum": ["any", "none", "source_only"],
										"default": "none"
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:distance"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/bientity_condition_types/distance/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How to compare the distance against the specified value.",
										"enum": [ "<", "<=", ">", ">=", "==", "!=" ]
									},
									"compare_to": {
										"type": "number",
										"description": "The distance (in blocks) to compare the distance between the actor and target to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:relative_rotation"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/bientity_condition_types/relative_rotation/"
							},
							"then": {
								"properties": {
									"axes": {
										"type":"array",
										"items": {
											"description": "The axes to get the angle values to calculate, and compare to.",
											"enum": ["x", "y", "z"]
										},
										"uniqueItems": true,
										"default": ["x", "y", "z"]
									},
									"actor_rotation": {
										"description": "Determines the initial point of the rotation for the actor. Accepts \"head\" or \"body\".",
										"enum": ["head", "body"],
										"default": "head"
									},
									"target_rotation": {
										"description": "Determines the initial point of the rotation for the target. Accepts \"head\" or \"body\".",
										"enum": ["head", "body"],
										"default": "body"
									},
									"comparison": {
										"description": "Determines how the calculated angle value will be compared to the specified value.",
										"enum": [ "<", "<=", ">", ">=", "==", "!=" ]
									},
									"compare_to": {
										"type": "number",
										"description": "The value to compare the calculated angle value to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						}
					]
				},
				"biome_condition": {
					"type": "object",
					"description": "Biome Conditions operate on a Biome.\nSee https://origins.readthedocs.io/en/latest/types/biome_condition_types/",
					"properties": {
						"type": {
							"type": "string",
							"description": "ID and namespace of the biome condition to evaluate.\nSee https://origins.readthedocs.io/en/latest/types/biome_condition_types/",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
							"examples": [
								"origins:and", "origins:or", "origins:constant",
								"origins:category", "origins:high_humidity", "origins:precipitation", "origins:temperature"
							]
						},
						"inverted": {
							"type": "boolean",
							"description": "If true, the condition acts inverted.",
							"default": false
						}
					},
					"required": ["type"],
					"allOf": [
						{
							"$comment": "#region meta",
							"if": {
								"properties": { "type": {"const":"origins:and"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "All of these condition types have to be fulfilled in order for this condition to be fulfilled.\nSee https://origins.readthedocs.io/en/latest/types/meta_condition_types/and/",
										"items": {"$ref": "#/definitions/conditions/properties/biome_condition"},
										"minItems": 1
									}
								},
								"required": ["conditions"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:constant"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"value": {
										"type": "boolean",
										"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled.\nSee https://origins.readthedocs.io/en/latest/types/meta_condition_types/constant/"
									}
								},
								"required": ["value"]
							},
							"$comment": "#endregion meta"
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:or"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "Any of these condition types have to be fulfilled in order for this condition to be fulfilled.\nSee https://origins.readthedocs.io/en/latest/types/meta_condition_types/or/",
										"items": {"$ref": "#/definitions/conditions/properties/biome_condition"},
										"minItems": 1
									}
								},
								"required": ["conditions"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:category"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/biome_condition_types/category/"
							},
							"then": {
								"properties": {
									"category": {
										"type": "string",
										"description": "Which category the biome must be in order to succeed the check.\nSee https://origins.readthedocs.io/en/latest/misc/extras/biome_categories/.",
										"examples": [
											"beach", "desert", "extreme_hills", "forest", "icy", "jungle", "mesa",
											"mountain", "mushroom", "nether", "none", "ocean", "plains", "river",
											"savanna", "swamp", "taiga", "the_end", "underground"
										]
									}
								},
								"required": ["category"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:precipitation"} },
								"required": ["type"],
								"$comment":"https://origins.readthedocs.io/en/latest/types/biome_condition_types/precipitation/"
							},
							"then": {
								"properties": {
									"precipitation": {
										"description": "Which precipitation the biome has to have in order to succeed the check. One of none, rain and snow.",
										"enum": ["none", "rain", "snow"]
									}
								},
								"required": ["precipitation"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:temperature"} },
								"required": ["type"],
								"$comment":"https://origins.readthedocs.io/en/latest/types/biome_condition_types/temperature/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How the temperature should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "Which value the temperature should be compared to.\nSee https://minecraft.fandom.com/wiki/Biome#List_of_Overworld_climates for a list of temperature values for the vanilla biomes."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						}
					]
				},
				"block_condition": {
					"type": "object",
					"description": "Block Condition Types operate on CachedBlockPosition, essentially a combination of World and BlockPos, which allows retrieving all necessary information about the block. These are available to power/condition types that provides a block_condition object field.\nSee https://origins.readthedocs.io/en/latest/types/block_condition_types/",
					"properties": {
						"type": {
							"type": "string",
							"description": "ID and namespace of the block condition to evaluate.\nSee https://origins.readthedocs.io/en/latest/types/block_condition_types/",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
							"examples": [
								"origins:and", "origins:constant", "origins:or", "origins:offset",
								"origins:adjacent", "origins:attachable", "origins:blast_resistance",
								"origins:block_state", "origins:block", "origins:distance_from_coordinates",
								"origins:exposed_to_sky", "origins:fluid", "origins:hardness", "origins:height",
								"origins:in_tag", "origins:light_blocking", "origins:light_level",
								"origins:material", "origins:movement_blocking", "origins:nbt",
								"origins:replacable", "origins:slipperiness", "origins:water_loggable"
							]
						},
						"inverted": {
							"type": "boolean",
							"description": "If true, the condition acts inverted.",
							"default": false
						}
					},
					"required": ["type"],
					"allOf": [
						{
							"$comment": "#region meta",
							"if": {
								"properties": { "type": {"const":"origins:and"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "All of these condition types have to be fulfilled in order for this condition to be fulfilled.\nSee https://origins.readthedocs.io/en/latest/types/meta_condition_types/and/",
										"items": {"$ref": "#/definitions/conditions/properties/block_condition"},
										"minItems": 1
									}
								},
								"required": ["conditions"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:constant"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"value": {
										"type": "boolean",
										"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled.\nSee https://origins.readthedocs.io/en/latest/types/meta_condition_types/constant/"
									}
								},
								"required": ["value"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:or"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "Any of these condition types have to be fulfilled in order for this condition to be fulfilled.\nSee https://origins.readthedocs.io/en/latest/types/meta_condition_types/or/",
										"items": {"$ref": "#/definitions/conditions/properties/block_condition"},
										"minItems": 1
									}
								},
								"required": ["conditions"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:offset"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/block_condition_types/offset/"
							},
							"then": {
								"properties": {
									"condition": {
										"$ref": "#/definitions/conditions/properties/block_condition",
										"description": "The condition to check with the given offset."
									},
									"x": {
										"type": "integer",
										"description": "How much to offset the position on the x-axis.",
										"default": 0
									},
									"y": {
										"type": "integer",
										"description": "How much to offset the position on the y-axis.",
										"default": 0
									},
									"z": {
										"type": "integer",
										"description": "How much to offset the position on the z-axis.",
										"default": 0
									}
								},
								"required": ["condition"]
							},
							"$comment": "#endregion meta"
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:adjacent"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/block_condition_types/adjacent/"
							},
							"then": {
								"properties": {
									"adjacent_condition": {
										"$ref": "#/definitions/conditions/properties/block_condition",
										"description": "The block condition that needs to be fulfilled by adjacent blocks to count towards this condition."
									},
									"comparison": {
										"description": "How the number of adjacent blocks which fulfill adjacent_condition should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "The value to compare the number to."
									}
								},
								"required": ["adjacent_condition", "comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:blast_resistance"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/block_condition_types/blast_resistance/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "Determines how the blast resistance of the block is compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "The value to compare the blast resistance of the block to."
									}
								},
								"required": ["adjacent_condition", "comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:block_state"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/block_condition_types/block_state/"
							},
							"then": {
								"properties": {
									"property": {
										"type": "string",
										"description": "The name of the property that should be checked.\nSee https://minecraft.fandom.com/wiki/Block_states#List_of_block_states for possible values.",
										"examples": ["facing", "waterlogged", "age", "leaves", "stage", "rotation", "open", "axis", "occupied", "part", "honey_level", "attachment", "powered", "tilt", "lit", "has_bottle_0", "drag", "signal_fire", "candles", "level"]
									},
									"comparison": {
										"description": "If specified, determines how the specified property will be compared to a specified value. If not and the property is an integer, it will just check if the block has the specified property.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "integer",
										"description": "If specified, the value to compare to the value of the specified property."
									},
									"value": {
										"type": "boolean",
										"description": "If specified, the boolean to compare to the value of the specified property if the specified property is a boolean."
									},
									"enum": {
										"type": "string",
										"description": "If specified, the string to compare to the specified property if the specified property is a string."
									}
								},
								"required": ["property"],
								"oneOf": [
									{"required": ["comparison", "compare_to"]}, {"required": ["value"]}, {"required": ["enum"]},
									{"not": {"anyOf": [{"required": ["comparison"]}, {"required": ["compare_to"]}, {"required": ["value"]}, {"required": ["enum"]}]}}
								]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:block"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/block_condition_types/block/"
							},
							"then": {
								"properties": {
									"block": {
										"type": "string",
										"description": "The namespace and ID of the block that this block needs to be to pass the check.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["minecraft:diamond_block", "minecraft:emerald_block"]
									}
								},
								"required": ["block"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:distance_from_coordinates"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/block_condition_types/distance_from_coordinates/"
							},
							"then": {
								"properties": {
									"reference": {
										"description": "The point to compare the distance to. Accepts \"world_origin\" or \"world_spawn\".",
										"enum": ["world_origin", "world_spawn"],
										"default": "world_origin"
									},
									"offset": {
										"$ref": "#/definitions/origins_data_types/properties/vector",
										"description": "If specified, determines how much the reference point should be offset."
									},
									"ignore_x": {
										"type":"boolean",
										"description": "Determines whether to consider the X axis to be 0.",
										"default": false
									},
									"ignore_y": {
										"type":"boolean",
										"description": "Determines whether to consider the Y axis to be 0.",
										"default": false
									},
									"ignore_z": {
										"type":"boolean",
										"description": "Determines whether to consider the Z axis to be 0.",
										"default": false
									},
									"shape": {
										"description": "Determines the shape of the check.Determines the shape of the check. Accepts \"cube\", \"star\" or \"sphere\".",
										"enum": ["cube", "star", "sphere"],
										"default": "cube"
									},
									"scale_reference_to_dimension": {
										"type":"boolean",
										"description": "Determines whether to check for the reference point whilst considering the coordinate scale of the dimension.",
										"default": true
									},
									"result_on_the_wrong_dimension": {
										"type":"boolean",
										"description": "If specified, this value will override the result of the comparison if the block being tested is not in the reference's dimension."
									},
									"round_to_digit": {
										"type":"integer",
										"description": "If specified, rounds the result to the closest number with the specified amount of digits after the comma. Negative numbers also work (e.g: -2 rounds to multiples of 100)."
									},
									"comparison": {
										"description": "Determines how the calculated distance is compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "The value to compare the calculated distance to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:fluid"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/block_condition_types/fluid/"
							},
							"then": {
								"properties": {
									"fluid_condition": {
										"$ref": "#/definitions/conditions/properties/fluid_condition",
										"description": "The fluid condition type to check the fluid state at the position."
									}
								},
								"required": ["fluid_condition"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:hardness"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/block_condition_types/hardness/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "Determines how the hardness value of the block is compared to the specified value.\nSee https://minecraft.fandom.com/wiki/Breaking#Blocks_by_hardness for a list of hardness for vanilla blocks",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "The value to compare the hardness value of the block to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:height"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/block_condition_types/height/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How the Y position of the block should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "The value to compare the Y position of the block to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:in_tag"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/block_condition_types/in_tag/"
							},
							"then": {
								"properties": {
									"tag": {
										"type": "string",
										"description": "The namespace and ID of the tag which the block should be in to pass the check.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["minecraft:base_stone_overworld"]
									}
								},
								"required": ["tag"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:light_level"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/block_condition_types/light_level/"
							},
							"then": {
								"properties": {
									"light_type": {
										"description": "The type of light level to compare. Either sky or block. If no type is provided, the greater value of the two types will be used, which is the \"resulting\" light level of that position.",
										"enum": ["sky", "block"]
									},
									"comparison": {
										"description": "How the light level should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "integer",
										"description": "The value to compare the light level at the block's position to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:origins:material"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/block_condition_types/material/"
							},
							"then": {
								"properties": {
									"material": {
										"type":"string",
										"description": "If specified, checks if the block classifies as this material. See https://origins.readthedocs.io/en/latest/misc/extras/materials/ for possible values.",
										"examples": [
											"air", "structure_void", "portal", "carpet", "plant",
											"underwater_plant", "replaceable_plant", "nether_shoots",
											"replaceable_underwater_plant", "water", "bubble_column", "lava",
											"snow_layer", "fire", "decoration", "cobweb", "sculk", "redstone_lamp",
											"organic_product", "soil", "solid_organic", "dense_ice", "aggregate",
											"sponge", "shulker_box", "wood", "nether_wood", "bamboo_sapling",
											"bamboo", "wool", "tnt", "leaves", "glass", "ice", "cactus", "stone",
											"metal", "snow_block", "repair_station", "barrier", "piston",
											"moss_block", "gourd", "egg", "cake", "amethyst", "powder_snow"
										]
									},
									"materials": {
										"type":"array",
										"description": "If specified, checks if the block classifies as one of these materials. See https://origins.readthedocs.io/en/latest/misc/extras/materials/ for possible values.",
										"items": {
											"type":"string",
											"description": "If specified, checks if the block classifies as this material. See https://origins.readthedocs.io/en/latest/misc/extras/materials/ for possible values.",
											"examples": [
												"air", "structure_void", "portal", "carpet", "plant",
												"underwater_plant", "replaceable_plant", "nether_shoots",
												"replaceable_underwater_plant", "water", "bubble_column", "lava",
												"snow_layer", "fire", "decoration", "cobweb", "sculk", "redstone_lamp",
												"organic_product", "soil", "solid_organic", "dense_ice", "aggregate",
												"sponge", "shulker_box", "wood", "nether_wood", "bamboo_sapling",
												"bamboo", "wool", "tnt", "leaves", "glass", "ice", "cactus", "stone",
												"metal", "snow_block", "repair_station", "barrier", "piston",
												"moss_block", "gourd", "egg", "cake", "amethyst", "powder_snow"
											]
										},
										"minItems": 1
									}
								},
								"oneOf": [
									{"required": ["material"]},
									{"required": ["materials"]}
								]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:nbt"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/block_condition_types/nbt/"
							},
							"then": {
								"properties": {
									"nbt": {
										"type":"string",
										"description": "The NBT data to check for.",
										"pattern": "\\{.*\\:.*\\}"
									}
								},
								"required": ["nbt"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:slipperiness"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/block_condition_types/slipperiness/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "Determines how the slipperiness value of the block is compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "The value to compare the slipperiness value of the block to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						}
					]
				},
				"damage_condition": {
					"type": "object",
					"description": "Damage Condition Types operate on a combination of DamageSource and Float, allowing to check not only the type of damage dealt, but also how much damage was dealt. These are available to power/condition types that provides a damage_condition object field.\nSee https://origins.readthedocs.io/en/latest/types/damage_condition_types/",
					"properties": {
						"type": {
							"type": "string",
							"description": "ID and namespace of the damage condition to evaluate.\nSee https://origins.readthedocs.io/en/latest/types/damage_condition_types/",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
							"examples": [
								"origins:and", "origins:constant", "origins:or",
								"origins:amount", "origins:attacker", "origins:fire", "origins:name",
								"origins:projectile"
							]
						},
						"inverted": {
							"type": "boolean",
							"default": false,
							"description": "If true, the condition acts inverted."
						}
					},
					"required": ["type"],
					"allOf": [
						{
							"$comment": "#region meta",
							"if": {
								"properties": { "type": {"const":"origins:and"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "All of these condition types have to be fulfilled in order for this condition to be fulfilled.\nSee https://origins.readthedocs.io/en/latest/types/meta_condition_types/and/",
										"items": {"$ref": "#/definitions/conditions/properties/damage_condition"},
										"minItems": 1
									}
								},
								"required": ["conditions"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:constant"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"value": {
										"type": "boolean",
										"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled.\nSee https://origins.readthedocs.io/en/latest/types/meta_condition_types/constant/"
									}
								},
								"required": ["value"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:or"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "Any of these condition types have to be fulfilled in order for this condition to be fulfilled.\nSee https://origins.readthedocs.io/en/latest/types/meta_condition_types/or/",
										"items": {"$ref": "#/definitions/conditions/properties/damage_condition"},
										"minItems": 1
									}
								},
								"required": ["conditions"]
							},
							"$comment": "#endregion meta"
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:amount"} },
								"require": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/damage_condition_types/amount/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How the amount of damage should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "The value to compare the amount of damage to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:attacker"} },
								"require": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/damage_condition_types/attacker/"
							},
							"then": {
								"properties": {
									"entity_condition": {
										"$ref": "#/definitions/conditions/properties/entity_condition",
										"description": "If set, the attacking entity must fulfill the provided entity condition in order for this condition to evaluate to true."
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:name"} },
								"require": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/damage_condition_types/name/"
							},
							"then": {
								"properties": {
									"name": {
										"type": "string",
										"description": "Name the damage source should have to pass the check. See https://origins.readthedocs.io/en/latest/misc/extras/damage_source_names/ for possible values.",
										"examples": [
											"anvil.player", "anvil", "arrow.item", "arrow", "badRespawnPoint",
											"cactus.player", "cactus", "cramming.player", "cramming",
											"dragonBreath.player", "dragonBreath", "drown.player", "drown",
											"dryout.player", "dryout", "even_more_magic", "explosion.player",
											"explosion", "fall.player", "fall", "fallingBlock.player",
											"fallingBlock", "fallingStalactite.player", "fallingStalactite",
											"fireball.item", "fireball", "fireworks.item", "fireworks.player",
											"fireworks", "flyIntoWall.player", "flyIntoWall", "freeze.player",
											"freeze", "generic.player", "generic", "hotFloor.player", "hotFloor",
											"indirectMagic.item", "indirectMagic", "inFire.player", "inFire",
											"inWall.player", "inWall", "lava.player", "lava",
											"lightningBolt.player", "lightningBolt", "magic.player", "magic",
											"mob.item", "mob", "onFire.player", "onFire", "outOfWorld.player",
											"outOfWorld", "player.item", "player", "stalagmite.player",
											"stalagmite", "starve.player", "starve", "sting.item", "sting.player",
											"sting", "sweetBerryBush.player", "sweetBerryBush", "thorns.item",
											"thorns", "thrown.item", "trident.item", "trident", "wither.player",
											"wither", "witherSkull",
											"genericDamageOverTime.player", "genericDamageOverTime",
											"hurt_by_water.player", "hurt_by_water", "no_water_for_gills.player",
											"no_water_for_gills"
										]
									}
								},
								"required": ["name"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:projectile"} },
								"require": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/damage_condition_types/projectile/"
							},
							"then": {
								"properties": {
									"projectile": {
										"type": "string",
										"description": "If set, the check will only pass if the projectile was of an entity type with the specified namespace and ID.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["minecraft:spectral_arrow"]
									}
								}
							}
						}
					]
				},
				"entity_condition": {
					"type": "object",
					"description": "Entity Condition Types operate on an Entity, which also allows access to the world. These are available to be used in most powers in the condition object field (or entity_condition in other power/condition types), which restricts when a power is active.\nSee https://origins.readthedocs.io/en/latest/types/entity_condition_types/",
					"properties": {
						"type": {
							"type": "string",
							"description": "ID and namespace of the entity condition to evaluate.\nSee https://origins.readthedocs.io/en/latest/types/entity_condition_types/",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
							"examples": [
								"origins:and", "origins:constant", "origins:or",
								"origins:ability", "origins:advancement", "origins:air", "origins:attribute",
								"origins:biome", "origins:block_collision", "origins:block_in_radius",
								"origins:brightness", "origins:climbing", "origins:collided_horizontally",
								"origins:command", "origins:creative_flying", "origins:daytime",
								"origins:dimension", "origins:distance_from_coordinates",
								"origins:elytra_flight_possible", "origins:enchantment", "origins:entity_group",
								"origins:entity_type", "origins:equipped_item", "origins:exists",
								"origins:exposed_to_sky", "origins:exposed_to_sun", "origins:fall_distance",
								"origins:fall_flying", "origins:fluid_height", "origins:food_level",
								"origins:gamemode", "origins:health", "origins:in_block_anywhere",
								"origins:in_block", "origins:in_rain", "origins:in_tag",
								"origins:invisible", "origins:living", "origins:moving", "origins:nbt",
								"origins:on_block", "origins:on_fire", "origins:origin",
								"origins:passenger_recursive", "origins:passenger", "origins:power_active",
								"origins:power_type", "origins:power", "origins:predicate", "origins:raycast",
								"origins:relative_health", "origins:resource",
								"origins:riding_recursive", "origins:riding_root", "origins:riding",
								"origins:saturation_level","origins:scoreboard", "origins:sneaking",
								"origins:sprinting", "origins:status_effect", "origins:submerged_in",
								"origins:swimming", "origins:tamed", "origins:time_of_day",
								"origins:using_effective_tool", "origins:using_item", "origins:xp_levels",
								"origins:xp_points"
							]
						},
						"inverted": {
							"type": "boolean",
							"description": "If true, the condition acts inverted.",
							"default": false
						}
					},
					"required": ["type"],
					"allOf": [
						{
							"$comment": "#region meta",
							"if": {
								"properties": { "type": {"const":"origins:and"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "All of these condition types have to be fulfilled in order for this condition to be fulfilled.\nSee https://origins.readthedocs.io/en/latest/types/meta_condition_types/and/",
										"items": {"$ref": "#/definitions/conditions/properties/entity_condition"},
										"minItems": 1
									}
								},
								"required": ["conditions"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:constant"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"value": {
										"type": "boolean",
										"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled.\nSee https://origins.readthedocs.io/en/latest/types/meta_condition_types/constant/"
									}
								},
								"required": ["value"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:or"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "Any of these condition types have to be fulfilled in order for this condition to be fulfilled.\nSee https://origins.readthedocs.io/en/latest/types/meta_condition_types/or/",
										"items": {"$ref": "#/definitions/conditions/properties/entity_condition"},
										"minItems": 1
									}
								},
								"required": ["conditions"]
							},
							"$comment": "#endregion meta"
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:ability"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/ability/"
							},
							"then": {
								"properties": {
									"ability": {
										"type": "string",
										"description": "The namespace and ID of the ability to check for.\nSee https://origins.readthedocs.io/en/latest/misc/extras/player_abilities/ for a list of vanilla Player Abilities",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["minecraft:flying", "minecraft:instabuild", "minecraft:invulnerable", "minecraft:mayBuild", "minecraft:mayfly"]
									}
								},
								"required": ["ability"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:advancement"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/advancement/"
							},
							"then": {
								"properties": {
									"advancement": {
										"type": "string",
										"description": "The namespace and ID of the advancement the player needs to have completed in order for this condition to evaluate to true.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["minecraft:story/smelt_iron"]
									}
								},
								"required": ["advancement"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:air"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/air/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How the breath (in ticks) should be compared to the specified value.\nPlayers (and most mobs) have a max value of 300 ticks, whilst dolphins have a max value of 4800 ticks. Axolotls, on the other hand, have a max value of 6000 ticks.\nIn order to get the value of a single bubble, you can divide the max value by 10. (max / 10 = value)",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "integer",
										"description": "Which value the breath should be compared to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:attribute"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/attribute/"
							},
							"then": {
								"properties": {
									"attribute": {
										"type": "string",
										"description": "ID of the attribute of which the value should be checked. See https://minecraft.fandom.com/wiki/Attribute#Attributes for a list of vanilla attributes that can be checked for.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": [
											"minecraft:generic.max_health", "minecraft:generic.follow_range",
											"minecraft:generic.knockback_resistance", "minecraft:generic.movement_speed",
											"minecraft:generic.attack_damage", "minecraft:generic.armor",
											"minecraft:generic.armor_toughness", "minecraft:generic.attack_knockback",
											"minecraft:generic.attack_speed", "minecraft:generic.luck",
											"minecraft:horse.jump_strength",
											"minecraft:generic.flying_speed",
											"minecraft:zombie.spawn_reinforcements"
										]
									},
									"comparison": {
										"description": "How to compare the attribute's value to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "Which value to compare the attribute's value to."
									}
								},
								"required": ["attribute", "comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:biome"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/biome/"
							},
							"then": {
								"properties": {
									"biome": {
										"type": "string",
										"description": "If specified, only evaluate the condition to true if the biome the entity is in matches the specified namespace and ID.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["minecraft:savanna", "minecraft:plains"]
									},
									"biomes": {
										"type": "array",
										"description": "If specified, only evaluate the condition to true if the biome the entity is in matches one of the specified namespace and IDs.",
										"items": {
											"type": "string",
											"description": "Only evaluate the condition to true if the biome the entity is in matches the specified namespace and ID.",
											"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
											"examples": [["minecraft:savanna", "minecraft:plains"]]
										},
										"minItems": 1
									},
									"condition": {
										"$ref": "#/definitions/conditions/properties/biome_condition",
										"description": "If specified, only evaluate the condition to true if the biome the entity is in fulfills the specified biome condition type."
									}
								},
								"$comment": "May not have both \"biome\" and \"biomes\" and must include at least on of the properties.",
								"not": {"required": ["biome", "biomes"]},
								"anyOf": [{"required": ["biome"]}, {"required": ["biomes"]}, {"required": ["condition"]}]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:block_collision"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/block_collision/"
							},
							"then": {
								"properties": {
									"offset_x": {
										"type": "number",
										"description": "By how much of the bounding box size should the box be offset in the X direction (e.g.: 0 = no offset, 1 = offset of exact width, 2 = offset of twice the width of the bounding box)"
									},
									"offset_y": {
										"type": "number",
										"description": "By how much of the bounding box size should the box be offset in the Y direction (e.g.: 0 = no offset, 1 = offset of exact width, 2 = offset of twice the width of the bounding box)"
									},
									"offset_z": {
										"type": "number",
										"description": "By how much of the bounding box size should the box be offset in the Z direction (e.g.: 0 = no offset, 1 = offset of exact width, 2 = offset of twice the width of the bounding box)"
									}
								},
								"required": ["offset_x", "offset_y", "offset_z"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:block_in_radius"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/block_in_radius/"
							},
							"then": {
								"properties": {
									"block_condition": {
										"$ref": "#/definitions/conditions/properties/block_condition",
										"description": "The block condition type to check for."
									},
									"radius": {
										"type": "integer",
										"description": "The radius to check the blocks that fulfills the specified block condition type within."
									},
									"shape": {
										"description": "Determines the shape of the radius. Accepts \"cube\", \"star\" or \"sphere\".",
										"enum": ["cube", "star", "sphere"],
										"default": "cube"
									},
									"comparison": {
										"description": "How the amount of blocks within the specified radius which fulfills the specified block condition type should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="],
										"default": ">="
									},
									"compare_to": {
										"type": "integer",
										"description": "The value to compare the amount to.",
										"default": 1
									}
								},
								"required": ["block_condition", "radius"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:brightness"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/brightness/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How to compare the brightness against the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "Which value to compare the brightness against.\nSee https://origins.readthedocs.io/en/latest/types/entity_condition_types/brightness/",
										"minimum": 0,
										"maximum": 1
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:command"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/command/"
							},
							"then": {
								"properties": {
									"command": {
										"type": "string",
										"description": "The command to execute.\norigins:command is only effective server-side. That means client-side power types such as origins:climbing, origins:entity_glow, origins:shader, etc. won't work with this.",
										"examples": ["execute if score @s objective1 = @s objective2"]
									},
									"comparison": {
										"description": "How to compare the stored result of the specified command to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "integer",
										"description": "The value to compare the stored result of the specified command to."
									},
									"permission_level": {
										"type": "integer",
										"description": "[Deprecated since 1.1.0]The permission level to use for the command. 0 is a \"survival player\", anything higher emulates some form of operator. See https://minecraft.fandom.com/wiki/Server.properties#op-permission-level for details.",
										"default": 4,
										"minimum": 0,
										"maximum": 4,
										"deprecated": true
									}
								},
								"required": ["command", "comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:dimension"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/dimension/"
							},
							"then": {
								"properties": {
									"dimension": {
										"type": "string",
										"description": "The namespace and ID of the dimension the player needs to be in for this condition to evaluate to true. Vanilla dimensions are minecraft:overworld, minecraft:the_nether and minecraft:the_end, but namespace and IDs of custom/modded dimensions should also work.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["minecraft:overworld", "minecraft:the_nether", "minecraft:the_end"]
									}
								},
								"required": ["dimension"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:distance_from_coordinates"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/distance_from_coordinates/"
							},
							"then": {
								"properties": {
									"reference": {
										"description": "The point to compare the distance to. Accepts \"world_origin\" or \"world_spawn\".",
										"enum": ["world_origin", "world_spawn"],
										"default": "world_origin"
									},
									"offset": {
										"$ref": "#/definitions/origins_data_types/properties/vector",
										"description": "If specified, determines how much the reference point should be offset."
									},
									"ignore_x": {
										"type":"boolean",
										"description": "Determines whether to consider the X axis to be 0.",
										"default": false
									},
									"ignore_y": {
										"type":"boolean",
										"description": "Determines whether to consider the Y axis to be 0.",
										"default": false
									},
									"ignore_z": {
										"type":"boolean",
										"description": "Determines whether to consider the Z axis to be 0.",
										"default": false
									},
									"shape": {
										"description": "Determines the shape of the check.Determines the shape of the check. Accepts \"cube\", \"star\" or \"sphere\".",
										"enum": ["cube", "star", "sphere"],
										"default": "cube"
									},
									"scale_reference_to_dimension": {
										"type":"boolean",
										"description": "Determines whether to check for the reference point whilst considering the coordinate scale of the dimension.",
										"default": true
									},
									"result_on_the_wrong_dimension": {
										"type":"boolean",
										"description": "If specified, this value will override the result of the comparison if the block being tested is not in the reference's dimension."
									},
									"round_to_digit": {
										"type":"integer",
										"description": "If specified, rounds the result to the closest number with the specified amount of digits after the comma. Negative numbers also work (e.g: -2 rounds to multiples of 100)."
									},
									"comparison": {
										"description": "Determines how the calculated distance is compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "The value to compare the calculated distance to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:elytra_flight_possible"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/elytra_flight_possible/"
							},
							"then": {
								"properties": {
									"check_state": {
										"type":"boolean",
										"description": "Determines if the condition should check if the entity is currently flying with an elytra.",
										"default": false
									},
									"check_abilities": {
										"type":"boolean",
										"description": "Determines if the condition should check if the entity can fly with an elytra.",
										"default": true
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:enchantment"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/enchantment/"
							},
							"then": {
								"properties": {
									"enchantment": {
										"type": "string",
										"description": "The namespace and ID of the enchantment of interest.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["minecraft:protection"]
									},
									"calculation": {
										"description": "Which number to compare - either the sum of levels of this enchantment on all of the player's equipment, or the max level of this enchantment on any of the player's equipment.",
										"enum": ["sum", "max"],
										"default": "sum"
									},
									"comparison": {
										"description": "How the enchantment level should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "integer",
										"description": "The value to compare the enchantment level to."
									}
								},
								"required": ["enchantment", "comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:entity_group"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/entity_group/"
							},
							"then": {
								"properties": {
									"group": {
										"description": "Entity group required for the entity to pass the check. One of default, undead, arthropod, illager and aquatic.\nSee https://minecraft.fandom.com/wiki/Mob#Classification for more information about entity groups.",
										"enum": ["default", "undead", "arthropod", "illager", "aquatic"]
									}
								},
								"required": ["group"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:entity_type"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/entity_type/"
							},
							"then": {
								"properties": {
									"entity_type": {
										"type": "string",
										"description": "The namespace and ID of the entity type the entity needs to have to pass the check.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["minecraft:creeper"]
									}
								},
								"required": ["entity_type"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:equipped_item"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/equipped_item/"
							},
							"then": {
								"properties": {
									"equipment_slot": {
										"description": "Determines which equipment slot to check for the item. Accepts \"mainhand\", \"offhand\", \"head\", \"chest\", \"legs\", \"feet\".",
										"enum": ["mainhand", "offhand", "head", "chest", "legs", "feet"]
									},
									"item_condition": {
										"$ref": "#/definitions/conditions/properties/item_condition",
										"description": "The item condition type to check for on the item in the specified equipment slot."
									}
								},
								"required": ["equipment_slot", "item_condition"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:fall_distance"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/fall_distance/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How the fall distance should be compared to the specified value.\nNote that the fall distance is 0 if the entity has the Slow Falling status effect.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "The value to compare the fall distance to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:fluid_height"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/fluid_height/"
							},
							"then": {
								"properties": {
									"fluid": {
										"type": "string",
										"description": "The namespace and ID of the fluid tag of which the height should be checked. Most important examples: minecraft:water and minecraft:lava.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["minecraft:water", "minecraft:lava"]
									},
									"comparison": {
										"description": "How the fluid height should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "Which value the fluid height should be compared to."
									}
								},
								"required": ["fluid", "comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:food_level"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/food_level/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How the food level should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "Which value the food level should be compared to.\nThe food level is in the range of 0 to 20.\nThis entity condition type will only work on players."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:gamemode"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/gamemode/"
							},
							"then": {
								"properties": {
									"gamemode": {
										"description": "Name of the gamemode the player should have in order for this condition to evaluate to true.",
										"examples": ["adventure", "creative", "spectator", "survival"]
									}
								},
								"required": ["gamemode"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:health"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/health/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How the health of the player should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "Which value the health should be compared to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:in_block_anywhere"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/in_block_anywhere/"
							},
							"then": {
								"properties": {
									"block_condition": {
										"$ref": "#/definitions/conditions/properties/block_condition",
										"description": "The block condition type which blocks need to fulfill in order to count for this condition."
									},
									"comparison": {
										"description": "How the number of blocks which overlap and fulfill block_condition should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="],
										"default": ">="
									},
									"compare_to": {
										"type": "integer",
										"description": "The value to compare the number to.",
										"default": 1
									}
								},
								"required": ["block_condition"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:in_block"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/in_block/"
							},
							"then": {
								"properties": {
									"block_condition": {
										"$ref": "#/definitions/conditions/properties/block_condition",
										"description": "The block condition type to check for on the block that is overlapping with the entity's feet."
									}
								},
								"required": ["block_condition"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:in_tag"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/in_tag/"
							},
							"then": {
								"properties": {
									"tag": {
										"type": "string",
										"description": "The namespace and ID of the entity type tag the entity type needs to be in to pass the check.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["minecraft:skeletons"]
									}
								},
								"required": ["tag"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:nbt"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/nbt/"
							},
							"then": {
								"properties": {
									"nbt": {
										"type": "string",
										"description": "The NBT data to check for.\norigins:nbt is only effective server-side. That means client-side power types such as origins:climbing, origins:entity_glow, origins:shader, etc. won't work with this.",
										"pattern": "\\{.*\\:.*\\}",
										"examples": ["{Tags: ['example_tag']}"]
									}
								},
								"required": ["nbt"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:on_block"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/on_block/"
							},
							"then": {
								"properties": {
									"block_condition": {
										"$ref": "#/definitions/conditions/properties/block_condition",
										"description": "If specified, the condition will evaluate to true if the block underneath the entity's feet fulfills the specified block condition type. Otherwise, only check if the entity is on the ground."
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:origin"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/origin/"
							},
							"then": {
								"properties": {
									"origin": {
										"type": "string",
										"description": "The namespace and ID of the origin the player needs to have to pass the check.\nUsing this Entity Condition on a non-player Entity will most likely crash the game. To prevent that make sure to check if the entity is a player by using the Entity Type (Entity Condition Type) to prevent your game from crashing.\nSee https://origins.readthedocs.io/en/latest/types/entity_condition_types/entity_type/",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["origins:human"]
									},
									"layer": {
										"type": "string",
										"description": "If specified, only evaluate the condition to true if the origin is from the specified origin layer.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["origins:origin"]
									}
								},
								"required": ["origin"]
							}
						},
						{
							"if": {
								"properties": { "type": { "enum": ["origins:passenger_recursive", "origins:passenger"] } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/passenger_recursive/ https://origins.readthedocs.io/en/latest/types/entity_condition_types/passenger/"
							},
							"then": {
								"properties": {
									"bientity_condition": {
										"$ref": "#/definitions/conditions/properties/bientity_condition",
										"description": "If specified, it will check for the entity/entities that fulfill the bi-entity condition."
									},
									"comparison": {
										"description": "How the number of entities that are currently riding the entity should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="],
										"default": ">="
									},
									"compare_to": {
										"type": "integer",
										"description": "Which value the number of entities currently riding the entity should be compared to.",
										"default": 1
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:power_active"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/power_active/"
							},
							"then": {
								"properties": {
									"power": {
										"type": "string",
										"description": "The namespace and ID of the power which will be checked for being active. (meaning the entity has the power and the power has all conditions fulfilled)",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["origins:phantomize"]
									}
								},
								"required": ["power"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:power_type"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/power_type/"
							},
							"then": {
								"properties": {
									"power": {
										"type": "string",
										"description": "The namespace and ID of the Power Type of a power the entity has.\nSee https://origins.readthedocs.io/en/latest/types/power_types/",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["origins:active_self"]
									}
								},
								"required": ["power"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:power"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/power/"
							},
							"then": {
								"properties": {
									"power": {
										"type": "string",
										"description": "The namespace and ID of the power the entity needs to have to pass the check.\nSince only Living Entities can have powers, using this entity condition on a non-living entity might crash the game. Always make sure to check if the entity is a Living Entity by using the Living (Entity Condition Type) to prevent your game from crashing.\nSee https://origins.readthedocs.io/en/latest/types/entity_condition_types/living/",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["origins:phantomize", "origins:damage_from_potions"]
									},
									"source": {
										"type": "string",
										"description": "The namespace and ID of the source of the power.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$"
									}
								},
								"required": ["power"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:predicate"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/predicate/"
							},
							"then": {
								"properties": {
									"predicate": {
										"type": "string",
										"description": "The namespace and ID of the predicate the entity needs to pass.\nNote: This condition is only effective server-side. That means client-side power types such as origins:climbing, origins:entity_glow, origins:shader, etc. won't work with this.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["example:weather/is_thunderstorm"]
									}
								},
								"required": ["predicate"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:raycast"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/raycast/"
							},
							"then": {
								"properties": {
									"distance": {
										"type":"number",
										"description": "Determines the maximum distance the ray-cast will travel."
									},
									"block": {
										"type":"boolean",
										"description": "Determines whether the ray-cast should include blocks.",
										"default": true
									},
									"entity": {
										"type":"boolean",
										"description": "Determines whether the ray-cast should include entities.",
										"default": true
									},
									"shape_type": {
										"description": "Determines how the ray-cast will handle blocks.",
										"enum": ["collider", "outline", "visual"],
										"default": "visual"
									},
									"fluid_handling": {
										"description": "Determines how the ray-cast will handle fluids.",
										"enum": ["any", "none", "source_only"],
										"default": "none"
									},
									"match_bientity_condition": {
										"$ref": "#/definitions/conditions/properties/bientity_condition",
										"description": "If specified, the entity condition type will check if this bi-entity condition type is fulfilled by either or both the 'actor' (the entity being checked by the entity condition type) and 'target' (entity that the ray-cast has gone through). If not, the entity will be ignored."
									},
									"hit_bientity_condition": {
										"$ref": "#/definitions/conditions/properties/bientity_condition",
										"description": "If specified, the entity condition type will check if this bi-entity condition type is fulfilled by either or both the 'actor' (the entity being checked by the entity condition type) and 'target' (the entity that has hit by the ray-cast)."
									},
									"block_condition": {
										"$ref": "#/definitions/conditions/properties/block_condition",
										"description": "If specified, the entity condition type will check if the block that was hit by the ray-cast fulfills this block condition type."
									}
								},
								"required": ["distance"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:relative_health"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/relative_health/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How the relative health of the player should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "Which value the relative health should be compared to.\nrelativeHealth = currentHealth / maxHealth",
										"minimum": 0,
										"maximum": 1
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:resource"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/resource/"
							},
							"then": {
								"properties": {
									"resource": {
										"type": "string",
										"description": "The namespace and ID of a power that will be evaluated.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["example:a_simple_resource"]
									},
									"comparison": {
										"description": "How the value of the power that will be evaluated should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "integer",
										"description": "The value to compare the value of the power that will be evaluated to."
									}
								},
								"required": ["resource", "comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:riding_recursive"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/riding_recursive/"
							},
							"then": {
								"properties": {
									"bientity_condition": {
										"$ref": "#/definitions/conditions/properties/bientity_condition",
										"description": "If specified, it will only check for the entity/entities that fulfill the bi-entity condition."
									},
									"comparison": {
										"description": "How the amount of entities currently being ridden should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="],
										"default": ">="
									},
									"compare_to": {
										"type": "integer",
										"description": "Which value the amount of entities currently being ridden should be compared to.",
										"default": 1
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": { "enum": ["origins:riding_root", "origins:riding"] } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/riding_root/ https://origins.readthedocs.io/en/latest/types/entity_condition_types/riding/"
							},
							"then": {
								"properties": {
									"bientity_condition": {
										"$ref": "#/definitions/conditions/properties/bientity_condition",
										"description": "If specified, it will only check for the entity/entities that fulfill the bi-entity condition."
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:saturation_level"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/saturation_level/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How the saturation level should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "The value the saturation level should be compared to.\nNote that only players have a saturation level."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:scoreboard"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/scoreboard/"
							},
							"then": {
								"properties": {
									"objective": {
										"type": "string",
										"description": "The name of the scoreboard objective to retrieve the value from and compare.\nDue to the nature of scoreboards, this condition is only effective on the server-side.\nIf the entity does not have the scoreboard objective, this condition returns false; ingoring of the values of \"comparison\" and \"compare_to\"."
									},
									"comparison": {
										"description": "How to compare the objective's value to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "integer",
										"description": "Which value to compare the objective's value to."
									}
								},
								"required": ["objective", "comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:status_effect"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/status_effect/"
							},
							"then": {
								"properties": {
									"effect": {
										"type": "string",
										"description": "The namespace and ID of the status effect to check for.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["minecraft:speed"]
									},
									"min_amplifier": {
										"type": "integer",
										"description": "The minimum amplifier the status effect should have in order to pass the check.\nNote: As 0 is the default strenght; effects like 'Speed II' have an amplifier (or bonus if you will) of 1.",
										"default": 0,
										"maximum": 2147483647
									},
									"max_amplifier": {
										"type": "integer",
										"description": "The maximum amplifier the status effect should have in order to pass the check.\nNote: As 0 is the default strenght; effects like 'Speed II' have an amplifier (or bonus if you will) of 1.",
										"default": 2147483647,
										"maximum": 2147483647
									},
									"min_duration": {
										"type": "integer",
										"description": "The minimum duration in ticks the status effect should have left in order to pass the check.",
										"default": 0,
										"minimum": 0,
										"maximum": 2147483647
									},
									"max_duration": {
										"type": "integer",
										"description": "The maximum duration in ticks the status effect should have left in order to pass the check.",
										"default": 2147483647,
										"minimum": 0,
										"maximum": 2147483647
									}
								},
								"required": ["effect"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:submerged_in"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/submerged_in/"
							},
							"then": {
								"properties": {
									"fluid": {
										"type": "string",
										"description": "The namespace and ID of the fluid tag that should be checked. Most important examples: minecraft:water and minecraft:lava.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["minecraft:water", "minecraft:lava"]
									}
								},
								"required": ["fluid"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:time_of_day"} },
								"require": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/time_of_day/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How the current day time ticks of the world should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "integer",
										"description": "The value to compare the current day time ticks of the world to.\nSee https://minecraft.fandom.com/wiki/Daylight_cycle#24-hour_Minecraft_day for how this value coresponds to the ingame",
										"minimum": 0,
										"maximum": 24000
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:using_item"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/using_item/"
							},
							"then": {
								"properties": {
									"item_condition": {
										"$ref": "#/definitions/conditions/properties/item_condition",
										"description": "If specified, the condition will only evaluate to true if the item that is being used fulfills the specified item condition type."
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:xp_levels"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/xp_levels/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How the experience level of the player should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "integer",
										"description": "Which value the experience level should be compared to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:xp_points"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/xp_points/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How the experience points of the player should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "integer",
										"description": "Which value the experience points should be compared to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						}
					]
				},
				"fluid_condition": {
					"type": "object",
					"description": "Fluid Condition Types operate on a FluidState, essentially which fluid (if any) exists, as well as properties of the fluid. These are available to power/condition types that provides a fluid_condition object field.\nSee https://origins.readthedocs.io/en/latest/types/fluid_condition_types/",
					"properties": {
						"type": {
							"type": "string",
							"description": "ID and namespace of the fluid condition to evaluate.\nSee https://origins.readthedocs.io/en/latest/types/fluid_condition_types/",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
							"examples": [
								"origins:and", "origins:constant", "origins:or",
								"origins:empty", "origins:in_tag", "origins:stil"
							]
						},
						"inverted": {
							"type": "boolean",
							"description": "If true, the condition acts inverted.",
							"default": false
						}
					},
					"required": ["type"],
					"allOf": [
						{
							"$comment": "#region meta",
							"if": {
								"properties": { "type": {"const":"origins:and"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "All of these condition types have to be fulfilled in order for this condition to be fulfilled.",
										"items": {"$ref": "#/definitions/conditions/properties/fluid_condition"},
										"minItems": 1
									}
								},
								"required": ["conditions"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:constant"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"value": {
										"type": "boolean",
										"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled."
									}
								},
								"required": ["value"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:or"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "Any of these condition types have to be fulfilled in order for this condition to be fulfilled.",
										"items": {"$ref": "#/definitions/conditions/properties/fluid_condition"},
										"minItems": 1
									}
								},
								"required": ["conditions"]
							},
							"$comment": "#endregion meta"
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:in_tag"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/fluid_condition_types/in_tag/"
							},
							"then": {
								"properties": {
									"tag": {
										"type": "string",
										"description": "ID of the tag which the fluid should be in to pass the check.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["minecraft:water"]
									}
								},
								"required": ["tag"]
							}
						}
					]
				},
				"item_condition": {
					"type": "object",
					"description": "Item Condition Types operate on an ItemStack. These are available to power/condition types that provides an item_condition object field.\nSee https://origins.readthedocs.io/en/latest/types/item_condition_types/",
					"properties": {
						"type": {
							"type": "string",
							"description": "ID and namespace of the item condition to evaluate.\nSee https://origins.readthedocs.io/en/latest/types/item_condition_types/",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
							"examples": [
								"origins:and", "origins:constant", "origins:or",
								"origins:amount", "origins:armor_value", "origins:empty", "origins:enchantment", "origins:fireproof",
								"origins:food", "origins:harvest_level", "origins:ingredient", "origins:meat", "origins:nbt", "origins:smeltable"
							]
						},
						"inverted": {
							"type": "boolean",
							"description": "If true, the condition acts inverted.",
							"default": false
						}
					},
					"required": ["type"],
					"allOf": [
						{
							"$comment": "#region meta",
							"if": {
								"properties": { "type": {"const":"origins:and"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "All of these condition types have to be fulfilled in order for this condition to be fulfilled.",
										"items": {"$ref": "#/definitions/conditions/properties/item_condition"},
										"minItems": 1
									}
								},
								"required": ["conditions"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:constant"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"value": {
										"type": "boolean",
										"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled."
									}
								},
								"required": ["value"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:or"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "Any of these condition types have to be fulfilled in order for this condition to be fulfilled.",
										"items": {"$ref": "#/definitions/conditions/properties/item_condition"},
										"minItems": 1
									}
								},
								"required": ["conditions"]
							},
							"$comment": "#endregion meta"
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:amount"} },
								"require": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/item_condition_types/amount/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "Determines how to compare the number of items in this stack to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "integer",
										"description": "Which value to compare the item's count value to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:armor_value"} },
								"require": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/item_condition_types/armor_value/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How to compare the item's armor value to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "integer",
										"description": "Which value to compare the item's armor value to.\nNon-armor items are considered as having an armor value of 0.\nSee https://minecraft.fandom.com/wiki/Helmet#Defense_points, https://minecraft.fandom.com/wiki/Chestplate#Defense_points, https://minecraft.fandom.com/wiki/Leggings#Defense_points and https://minecraft.fandom.com/wiki/Boots#Defense_points"
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:enchantment"} },
								"require": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/item_condition_types/enchantment/"
							},
							"then": {
								"properties": {
									"enchantment": {
										"type": "string",
										"description": "ID of the enchantment of interest",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["minecraft:aqua_affinity", "minecraft:bane_of_arthropods", "minecraft:blast_protection", "minecraft:channeling", "minecraft:protection", "minecraft:fortune"]
									},
									"comparison": {
										"description": "How to compare the enchantment level the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "integer",
										"description": "Which value to compare the enchantment level against."
									}
								},
								"required": ["enchantment", "comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:harvest_level"} },
								"require": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/item_condition_types/harvest_level/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How to compare the item's harvest level to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
										
									},
									"compare_to": {
										"type": "integer",
										"description": "Which value to compare the item's harvest level to.\nRefer to https://minecraft.fandom.com/wiki/Tiers for the harvest level of the materials (there it's called \"mining level\").\nItems without a material are considered to have a harvest level of 0."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:ingredient"} },
								"require": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/item_condition_types/ingredient/"
							},
							"then": {
								"properties": {
									"ingredient": {
										"$ref": "#/definitions/origins_data_types/properties/ingredient",
										"description": "The ingredient this item must match to pass the check."
									}
								},
								"required": ["ingredient"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:nbt"} },
								"require": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/item_condition_types/nbt/"
							},
							"then": {
								"properties": {
									"nbt": {
										"type": "string",
										"description": "The NBT data to check for.",
										"pattern": "\\{.*\\:.*\\}",
										"examples": ["{exampleCustomTag: 1b}"]
									}
								},
								"required": ["nbt"]
							}
						}
					]
				}
			}
		},
		"actions": {
			"type": "object",
			"description": "Group for actions",
			"properties": {
				"bientity_action": {
					"$comment": "https://origins.readthedocs.io/en/latest/bientity_actions/",
					"type": "object",
					"description": "Bi-entity Action Types operate on a Pair<Entity, Entity>; in simpler terms: an actor and a target. The actor and target is determined depending on the used power type, and can be swapped. These are available to power/action types that provides a bientity_action object field.\nSee https://origins.readthedocs.io/en/latest/types/bientity_action_types/",
					"properties": {
						"type": {
							"type": "string",
							"description": "ID and namespace of the bientity action to evaluate.\nSee https://origins.readthedocs.io/en/latest/types/bientity_action_types/",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
							"examples": [
								"origins:and", "origins:chance", "origins:choice", "origins:delay", "origins:if_else_list", "origins:if_else",
								"origins:nothing",
								"origins:actor_action", "origins:invert", "origins:target_action",
								"origins:add_velocity", "origins:damage", "origins:mount", "origins:set_in_love", "origins:tame"
							]
						}
					},
					"required": ["type"],
					"allOf": [
						{
							"$comment": "#region meta",
							"if": {
								"properties": { "type": {"const":"origins:and"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"actions": {
										"type": "array",
										"description": "These actions will be executed one after the other (but in the same tick).\nSee https://origins.readthedocs.io/en/latest/types/meta_action_types/and/",
										"items": {"$ref": "#/definitions/actions/properties/bientity_action"},
										"minItems": 1
									}
								},
								"required": ["actions"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:chance"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/chance/"
							},
							"then": {
								"properties": {
									"action": {
										"$ref": "#/definitions/actions/properties/bientity_action",
										"description": "The action which might be executed."
									},
									"chance": {
										"type": "number",
										"description": "The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance).",
										"exclusiveMinimum": 0,
										"exclusiveMaximum": 1
									},
									"fail_action": {
										"$ref": "#/definitions/actions/properties/bientity_action",
										"description": "The action to execute if the specified action in the action field is not executed."
									}
								},
								"required": ["action", "chance"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:choice"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/choice/"
							},
							"then": {
								"properties": {
									"actions": {
										"type": "array",
										"description": "Executes one of the provided actions, choosing randomly based on the assigned weights. The actions with higher weight values are more likely to be chosen.\nweight / sumOfAllWeights = chance",
										"items": {
											"type": "object",
											"properties": {
												"element": {"$ref": "#/definitions/actions/properties/bientity_action"},
												"weight": {"type": "integer"}
											},
											"required": ["element", "weight"]
										},
										"minItems": 2
									}
								},
								"required": ["actions"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:delay"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/delay/"
							},
							"then": {
								"properties": {
									"action": {
										"$ref": "#/definitions/actions/properties/entity_action",
										"description": "The action which will be executed after the delay."
									},
									"ticks": {
										"type":"integer",
										"description": "The amount of ticks until the action is executed.\nDelaying an action for more than a few ticks is not recommended! This meta action type is not reliable for such task.\nSee https://origins.readthedocs.io/en/latest/types/meta_action_types/delay/"
									}
								},
								"required": ["action", "ticks"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:if_else_list"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"actions": {
										"type": "array",
										"description": "Checks a list of actions associated with conditions, and executes the first one in the list for which the condition holds. Basically a less indentation-heavy way to represent a deeply nested If-Else (Meta Action Type).\nSee https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list/",
										"items": {
											"type": "object",
											"properties": {
												"action": {"$ref": "#/definitions/actions/properties/bientity_action"},
												"condition": {"$ref": "#/definitions/conditions/properties/bientity_condition"}
											},
											"required": ["action", "condition"]
										},
										"minItems": 2
									}
								},
								"required": ["actions"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:if_else"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else/"
							},
							"then": {
								"properties": {
									"condition": {
										"$ref": "#/definitions/conditions/properties/bientity_condition",
										"description": "A condition based on the type of action."
									},
									"if_action": {
										"$ref": "#/definitions/actions/properties/bientity_action",
										"description": "The action which is executed when the condition evaluates to true."
									},
									"else_action": {
										"$ref": "#/definitions/actions/properties/bientity_action",
										"description": "If present, this action will be executed when the condition evaluates to false."
									}
								},
								"required": ["condition", "if_action"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:actor_action"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/bientity_action_types/actor_action/"
							},
							"then": {
								"properties": {
									"action": {
										"$ref": "#/definitions/actions/properties/entity_action",
										"description": "The entity action type to execute on the actor entity."
									}
								},
								"required": ["action"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:invert"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/bientity_action_types/invert/"
							},
							"then": {
								"properties": {
									"action": {
										"$ref": "#/definitions/actions/properties/bientity_action",
										"description": "The bi-entity action to execute which will have its 'target' and 'actor' contexts swapped."
									}
								},
								"required": ["action"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:target_action"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/bientity_action_types/target_action/"
							},
							"then": {
								"properties": {
									"action": {
										"$ref": "#/definitions/actions/properties/entity_action",
										"description": "The entity action type to execute on the target entity."
									}
								},
								"required": ["action"]
							},
							"$comment": "#endregion meta"
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:add_velocity"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/bientity_action_types/add_velocity/"
							},
							"then": {
								"properties": {
									"x": {
										"type": "number",
										"default": 0.0,
										"description": "The amount of velocity to add on the x-axis."
									},
									"y": {
										"type": "number",
										"default": 0.0,
										"description": "The amount of velocity to add on the y-axis."
									},
									"z": {
										"type": "number",
										"default": 0.0,
										"description": "The amount of velocity to add on the z-axis."
									},
									"client": {
										"type":"boolean",
										"default": true,
										"description": "If this is false, the action will not execute on the client.\nUsed in cases where this action behaves unexpectedly. See https://origins.readthedocs.io/en/latest/types/bientity_action_types/add_velocity/"
									},
									"server": {
										"type":"boolean",
										"default": true,
										"description": "If this is false, the action will not execute on the server.\nUsed in cases where this action behaves unexpectedly. See https://origins.readthedocs.io/en/latest/types/bientity_action_types/add_velocity/"
									},
									"set": {
										"type": "boolean",
										"default": false,
										"description": "If this is true, the action will act as a \"set\" velocity action, overriding the entity's current velocity instead of adding to it."
									}
								},
								"$comment": "origins:nothing should be used instead if you want no change.",
								"allOf": [
									{"not": { "properties": {
										"x": {"const": 0}, "y": {"const": 0}, "z": {"const": 0},
										"set": {"const": false}
									}}},
									{"not": { "properties": {
										"client": {"const": false}, "server": {"const": false}
									}}}
								]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:damage"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/bientity_action_types/damage/"
							},
							"then": {
								"properties": {
									"amount": {
										"type": "number",
										"description": "The amount of damage to deal."
									},
									"source": {
										"$ref": "#/definitions/origins_data_types/properties/damage_source",
										"description": "The damage source to be used. Controls e.g. the death message, invulnerabilities (e.g. towards fire), or whether armor is taken into account."
									}
								},
								"required": ["amount", "source"]
							}
						}
					]
				},
				"block_action": {
					"type": "object",
					"description": "Block Actions operate an action on a selected block or set of blocks.",
					"properties": {
						"type": {
							"type": "string",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
							"examples": [
								"origins:and", "origins:chance", "origins:choice", "origins:delay",
								"origins:if_else_list", "origins:if_else", "origins:nothing",
								"origins:offset",
								"origins:add_block", "origins:bonemeal", "origins:execute_command",
								"origins:explode", "origins:modify_block_state", "origins:set_block"
							]
						}
					},
					"required": ["type"],
					"allOf": [
						{
							"$comment": "#region meta",
							"if": {
								"properties": { "type": {"const":"origins:and"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"actions": {
										"type": "array",
										"description": "These actions will be executed one after the other (but in the same tick).\nSee https://origins.readthedocs.io/en/latest/types/meta_action_types/and/",
										"items": {"$ref": "#/definitions/actions/properties/block_action"},
										"minItems": 1
									}
								},
								"required": ["actions"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:chance"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/chance/"
							},
							"then": {
								"properties": {
									"action": {
										"$ref": "#/definitions/actions/properties/block_action",
										"description": "The action which might be executed."
									},
									"chance": {
										"type": "number",
										"description": "The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance).",
										"exclusiveMinimum": 0,
										"exclusiveMaximum": 1
									},
									"fail_action": {
										"$ref": "#/definitions/actions/properties/block_action",
										"description": "The action to execute if the specified action in the action field is not executed."
									}
								},
								"required": ["action", "chance"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:choice"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/choice/"
							},
							"then": {
								"properties": {
									"actions": {
										"type": "array",
										"description": "Executes one of the provided actions, choosing randomly based on the assigned weights. The actions with higher weight values are more likely to be chosen.\nweight / sumOfAllWeights = chance",
										"items": {
											"type": "object",
											"properties": {
												"element": {"$ref": "#/definitions/actions/properties/block_action"},
												"weight": {"type": "integer"}
											},
											"required": ["element", "weight"]
										},
										"minItems": 2
									}
								},
								"required": ["actions"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:delay"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/delay/"
							},
							"then": {
								"properties": {
									"action": {
										"$ref": "#/definitions/actions/properties/block_action",
										"description": "The action which will be executed after the delay."
									},
									"ticks": {
										"type":"integer",
										"description": "The amount of ticks until the action is executed.\nDelaying an action for more than a few ticks is not recommended! This meta action type is not reliable for such task.\nSee https://origins.readthedocs.io/en/latest/types/meta_action_types/delay/"
									}
								},
								"required": ["action", "ticks"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:if_else_list"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"actions": {
										"type": "array",
										"description": "Checks a list of actions associated with conditions, and executes the first one in the list for which the condition holds. Basically a less indentation-heavy way to represent a deeply nested If-Else (Meta Action Type).\nSee https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list/",
										"items": {
											"type": "object",
											"properties": {
												"action": {"$ref": "#/definitions/actions/properties/block_action"},
												"condition": {"$ref": "#/definitions/conditions/properties/block_condition"}
											},
											"required": ["action", "condition"]
										},
										"minItems": 2
									}
								},
								"required": ["actions"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:if_else"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else/"
							},
							"then": {
								"properties": {
									"condition": {
										"$ref": "#/definitions/conditions/properties/block_condition",
										"description": "A condition based on the type of action."
									},
									"if_action": {
										"$ref": "#/definitions/actions/properties/block_action",
										"description": "The action which is executed when the condition evaluates to true."
									},
									"else_action": {
										"$ref": "#/definitions/actions/properties/block_action",
										"description": "If present, this action will be executed when the condition evaluates to false."
									}
								},
								"required": ["condition", "if_action"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:offset"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/block_action_types/offset/"
							},
							"then": {
								"properties": {
									"action": {
										"$ref": "#/definitions/actions/properties/block_action",
										"description": "The action to apply with the given offset."
									},
									"x": {
										"type": "integer",
										"description": "How much to offset the position on the x-axis.",
										"default": 0
									},
									"y": {
										"type": "integer",
										"description": "How much to offset the position on the y-axis.",
										"default": 0
									},
									"z": {
										"type": "integer",
										"description": "How much to offset the position on the z-axis.",
										"default": 0
									}
								},
								"required": ["action"],
								"not": { "properties": {
									"x": {"const": 0}, "y": {"const": 0}, "z": {"const": 0}
								}}
							},
							"$comment": "#endregion meta"
						},
						{
							"if": {
								"properties": { "type": { "enum": ["origins:add_block", "origins:set_block"] } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/block_action_types/add_block/ https://origins.readthedocs.io/en/latest/types/block_action_types/set_block/"
							},
							"then": {
								"properties": {
									"block": {
										"type": "string",
										"description": "The namespace and ID of the block to place.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["minecraft:coal_ore"]
									}
								},
								"required": ["block"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:bonemeal"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/block_action_types/bonemeal/"
							},
							"then": {
								"properties": {
									"effects": {
										"type":"boolean",
										"default": true,
										"description": "Determines if the particle and other visual effects of the bonemeal-ing action should appear."
									}
								},
								"required": ["command"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:execute_command"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/block_action_types/execute_command/"
							},
							"then": {
								"properties": {
									"command": {
										"type": "string",
										"description": "The command to execute.",
										"examples": ["summon minecraft:item ~ ~ ~ {Item:{id:\\\"minecraft:wheat\\\",Count:1}}"]
									},
									"permission_level": {
										"type": "integer",
										"description": "[Deprecated since 1.1.0]The permission level to use for the command. 0 is a \"survival player\", anything higher emulates some form of operator.\nSee https://minecraft.fandom.com/wiki/Server.properties#op-permission-level for details.",
										"default": 4,
										"minimum": 0,
										"maximum": 4,
										"deprecated": true
									}
								},
								"required": ["command"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:explode"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/block_action_types/explode/"
							},
							"then": {
								"properties": {
									"power": {
										"type":"number",
										"description": "Determines the power of the explosion."
									},
									"destruction_type": {
										"description": "Determines the effect of the explosion on the terrain.",
										"enum": ["break", "destroy", "none"],
										"default": "break"
									},
									"damage_self": {
										"type":"boolean",
										"default": true,
										"description": "Determines if the exploding block should be affected by the summoned explosion."
									},
									"indestructible": {
										"$ref": "#/definitions/conditions/properties/block_condition",
										"description": "If specified, the blocks that fulfills the specified block condition type is not destroyed by the summoned explosion."
									},
									"destructible": {
										"$ref": "#/definitions/conditions/properties/block_condition",
										"description": "If specified, the blocks that fulfills this specified block condition type are the only blocks that are destroyed by the summoned explosion."
									},
									"create_fire": {
										"type":"boolean",
										"default":false,
										"description": "Determines if the explosion should create fire."
									}
								},
								"required": ["power"],
								"not": {"required": ["indestructible", "destructible"]}
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:modify_block_state"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/block_action_types/modify_block_state/"
							},
							"then": {
								"properties": {
									"property": {
										"type":"string",
										"description": "The name of the property that will be modified.\nSee https://minecraft.fandom.com/wiki/Block_states#List_of_block_states for possible values.",
										"examples": ["facing", "waterlogged", "age", "leaves", "stage", "rotation", "open", "axis", "occupied", "part", "honey_level", "attachment", "powered", "tilt", "lit", "has_bottle_0", "drag", "signal_fire", "candles", "level"]
									},
									"operation": {
										"description": "Determines how the value specified in the change field is operated on the specified property. Accepts \"add\" or \"set\".",
										"enum": ["add", "set"],
										"default": "add"
									},
									"change": {
										"type":"integer",
										"description": "If specified, the value to add, remove or set to/from the specified property if the specified property is an integer."
									},
									"value": {
										"type":"boolean",
										"description": "If specified, the boolean to use as the new value for the specified property if the specified property is a boolean."
									},
									"enum": {
										"type":"string",
										"description": "If specified, the string to use as the new value for the specified property if the specified property is a string."
									},
									"cycle": {
										"type":"boolean",
										"default": false,
										"description": "If set to true, changes the property to the next state in the cycle, ignoring all other optional fields. All property types can use this operation."
									}
								},
								"required": ["property"],
								"oneOf": [
									{"required": ["change"]}, {"required": ["value"]}, {"required": ["enum"]}, {"properties": {"cycle": {"const": true}}},
									{"not": {"anyOf": [{"required": ["change"]}, {"required": ["value"]}, {"required": ["enum"]}, {"properties": {"cycle": {"const": true}}}]}}
								]
							}
						}
					]
				},
				"entity_action": {
					"type": "object",
					"description": "Entity Actions operate on an Entity. Some more specific actions only have an effect on more specific entity types (e.g. Exhaust (Action) only works on PlayerEntity, as other entities do not have a hunger bar).",
					"properties": {
						"type": {
							"type": "string",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
							"examples": [
								"origins:and", "origins:chance", "origins:choice", "origins:delay",
								"origins:if_else_list", "origins:if_else", "origins:nothing",
								"origins:add_velocity", "origins:add_xp", "origins:apply_effect", "origins:area_of_effect", "origins:block_action_at",
								"origins:change_resource", "origins:clear_effect", "origins:crafting_table", "origins:damage", "origins:dismount",
								"origins:emit_game_event", "origins:ender_chest", "origins:equipped_item_action", "origins:execute_command",
								"origins:exhaust", "origins:explode", "origins:extinguish", "origins:feed", "origins:gain_air", "origins:give",
								"origins:grant_power", "origins:heal", "origins:passenger_action", "origins:play_sound", "origins:raycast",
								"origins:revoke_power", "origins:riding_action", "origins:set_fall_distance", "origins:set_on_fire",
								"origins:spawn_effect_cloud", "origins:spawn_entity", "origins:spawn_particles", "origins:swing_hand",
								"origins:toggle", "origins:trigger_cooldown"
							]
						}
					},
					"required": ["type"],
					"allOf": [
						{
							"$comment": "#region meta",
							"if": {
								"properties": { "type": {"const":"origins:and"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"actions": {
										"type": "array",
										"description": "These actions will be executed one after the other (but in the same tick).\nSee https://origins.readthedocs.io/en/latest/types/meta_action_types/and/",
										"items": {"$ref": "#/definitions/actions/properties/entity_action"},
										"minItems": 1
									}
								},
								"required": ["actions"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:chance"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/chance/"
							},
							"then": {
								"properties": {
									"action": {
										"$ref": "#/definitions/actions/properties/entity_action",
										"description": "The action which might be executed."
									},
									"chance": {
										"type": "number",
										"description": "The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance).",
										"exclusiveMinimum": 0,
										"exclusiveMaximum": 1
									},
									"fail_action": {
										"$ref": "#/definitions/actions/properties/entity_action",
										"description": "The action to execute if the specified action in the action field is not executed."
									}
								},
								"required": ["action", "chance"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:choice"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/choice/"
							},
							"then": {
								"properties": {
									"actions": {
										"type": "array",
										"description": "Executes one of the provided actions, choosing randomly based on the assigned weights. The actions with higher weight values are more likely to be chosen.\nweight / sumOfAllWeights = chance",
										"items": {
											"type": "object",
											"properties": {
												"element": {"$ref": "#/definitions/actions/properties/entity_action"},
												"weight": {"type": "integer"}
											},
											"required": ["element", "weight"]
										},
										"minItems": 2
									}
								},
								"required": ["actions"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:delay"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/delay/"
							},
							"then": {
								"properties": {
									"action": {
										"$ref": "#/definitions/actions/properties/entity_action",
										"description": "The action which will be executed after the delay."
									},
									"ticks": {
										"type":"integer",
										"description": "The amount of ticks until the action is executed.\nDelaying an action for more than a few ticks is not recommended! This meta action type is not reliable for such task.\nSee https://origins.readthedocs.io/en/latest/types/meta_action_types/delay/"
									}
								},
								"required": ["action", "ticks"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:if_else_list"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"actions": {
										"type": "array",
										"description": "Checks a list of actions associated with conditions, and executes the first one in the list for which the condition holds. Basically a less indentation-heavy way to represent a deeply nested If-Else (Meta Action Type).\nSee https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list/",
										"items": {
											"type": "object",
											"properties": {
												"action": {"$ref": "#/definitions/actions/properties/entity_action"},
												"condition": {"$ref": "#/definitions/conditions/properties/entity_condition"}
											},
											"required": ["action", "condition"]
										},
										"minItems": 2
									}
								},
								"required": ["actions"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:if_else"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else/"
							},
							"then": {
								"properties": {
									"condition": {
										"$ref": "#/definitions/conditions/properties/entity_condition",
										"description": "A condition based on the type of action."
									},
									"if_action": {
										"$ref": "#/definitions/actions/properties/entity_action",
										"description": "The action which is executed when the condition evaluates to true."
									},
									"else_action": {
										"$ref": "#/definitions/actions/properties/entity_action",
										"description": "If present, this action will be executed when the condition evaluates to false."
									}
								},
								"required": ["condition", "if_action"]
							},
							"$comment": "#endregion meta"
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:add_velocity"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/add_velocity/"
							},
							"then": {
								"properties": {
									"x": {
										"type": "number",
										"default": 0.0,
										"description": "The amount of velocity to add on the x-axis."
									},
									"y": {
										"type": "number",
										"default": 0.0,
										"description": "The amount of velocity to add on the y-axis."
									},
									"z": {
										"type": "number",
										"default": 0.0,
										"description": "The amount of velocity to add on the z-axis."
									},
									"space": {
										"description": "The Space to perform the velocity addition in.\nSee https://origins.readthedocs.io/en/latest/misc/extras/space/",
										"default": "world",
										"enum": ["world", "local", "local_horizontal", "local_horizontal_normalized", "velocity", "velocity_normalized", "velocity_horizontal", "velocity_horizontal_normalized"]
									},
									"client": {
										"type":"boolean",
										"default": true,
										"description": "If this is false, the action will not execute on the client.\nUsed in cases where this action behaves unexpectedly. See https://origins.readthedocs.io/en/latest/types/entity_action_types/add_velocity/"
									},
									"server": {
										"type":"boolean",
										"default": true,
										"description": "If this is false, the action will not execute on the server.\nUsed in cases where this action behaves unexpectedly. See https://origins.readthedocs.io/en/latest/types/entity_action_types/add_velocity/"
									},
									"set": {
										"type": "boolean",
										"default": false,
										"description": "If this is true, the action will act as a \"set\" velocity action, overriding the entity's current velocity instead of adding to it."
									}
								},
								"$comment": "origins:nothing should be used instead if you want no change."
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:add_xp"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/add_xp/"
							},
							"then": {
								"properties": {
									"points": {
										"type": "integer",
										"description": "If set, this is the amount experience points that will be given to the player. Can not be negative.",
										"minimum": 0
									},
									"levels": {
										"type": "integer",
										"description": "If set, this is the amount experience levels that will be given to the player. Can be negative and thus used to subtract levels."
									}
								},
								"anyOf": [
									{"required": ["points"]},
									{"required": ["levels"]}
								]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:apply_effect"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/apply_effect/"
							},
							"then": {
								"properties": {
									"effect": {
										"$ref": "#/definitions/origins_data_types/properties/status_effect_instance",
										"description": "If set, this status effect will be applied by this action."
									},
									"effects": {
										"type": "array",
										"description": "If set, these status effects will be applied by this action.",
										"items": {"$ref": "#/definitions/origins_data_types/properties/status_effect_instance"},
										"minItems": 1
									}
								},
								"oneOf": [{"required": ["effect"]}, {"required": ["effects"]}]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:area_of_effect"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/area_of_effect/"
							},
							"then": {
								"properties": {
									"radius": {
										"type":"number",
										"description": "Determines the radius of the area.",
										"default": 16.0
									},
									"bientity_action": {
										"$ref": "#/definitions/actions/properties/bientity_action",
										"description": "If specified, this bi-entity action type may be executed on either or both the actor (the entity that has the power) and target (the entities within the specified radius)."
									},
									"bientity_condition": {
										"$ref": "#/definitions/conditions/properties/bientity_condition",
										"description": "If specified, only execute the specified bi-entity action if this bi-entity condition type is fulfilled by either or both the 'actor' (the entity that has the power) or 'target' (the entities within the specified radius)."
									},
									"include_target": {
										"type":"boolean",
										"description": "Determines whether the entity this action was executed on is included in the radius check.",
										"default": false
									}
								},
								"required": ["bientity_action"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:block_action_at"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/block_action_at/"
							},
							"then": {
								"properties": {
									"block_action": {
										"$ref": "#/definitions/actions/properties/block_action",
										"description": "The block action type to execute."
									}
								},
								"required": ["block_action"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:change_resource"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/change_resource/"
							},
							"then": {
								"properties": {
									"resource": {
										"type": "string",
										"description": "The namespace and ID of the power that uses the Resource (Power Type) or has a built-in cooldown."
									},
									"change": {
										"type": "integer",
										"description": "This value will be added to the resource (won't go below min or above max of the Resource (Power Type))."
									},
									"operation": {
										"description": "Determines if the action should add or set the value of the resource. Accepts \"add\" or \"set\".",
										"enum": ["add", "set"],
										"default": "add"
									}
								},
								"required": ["resource", "change"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:clear_effect"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/clear_effect/"
							},
							"then": {
								"properties": {
									"effect": {
										"type": "string",
										"description": "If specified, the status effect with this namespace and ID will be cleared. If not specified, all status effects will be cleared.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["minecraft:poison"]
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:damage"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/damage/"
							},
							"then": {
								"properties": {
									"amount": {
										"type": "number",
										"description": "The amount of damage to deal."
									},
									"source": {"$ref": "#/definitions/origins_data_types/properties/damage_source"}
								},
								"required": ["amount", "source"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:emit_game_event"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"event": {
										"type": "string",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"description": "The namespace and ID of a game event. See https://minecraft.fandom.com/wiki/Sculk_Sensor#Vibration_amplitudes for a list of game events you can use.",
										"examples": [
											"minecraft:step",
											"minecraft:flap",
											"minecraft:swim",
											"minecraft:elytra_free_fall",
											"minecraft:hit_ground",
											"minecraft:block_change", "minecraft:minecart_moving", "minecraft:ring_bell", "minecraft:splash", "minecraft:wolf_shaking",
											"minecraft:drinking_finish", "minecraft:prime_fuse", "minecraft:projectile_shoot",
											"minecraft:mob_interact", "minecraft:projectile_land", "minecraft:eat", "minecraft:entity_damaged",
											"minecraft:equip", "minecraft:shear", "minecraft:ravager_roar",
											"minecraft:block_close", "minecraft:block_unswitch", "minecraft:block_unpress", "minecraft:block_detach", "minecraft:dispense_fail",
											"minecraft:block_open", "minecraft:block_switch", "minecraft:block_press", "minecraft:block_attach",
											"minecraft:block_place", "minecraft:entity_place", "minecraft:fluid_place",
											"minecraft:block_destroy", "minecraft:entity_killed", "minecraft:fluid_pickup",
											"minecraft:fishing_rod_reel_in", "minecraft:container_close", "minecraft:piston_contract", "minecraft:shulker_close",
											"minecraft:fishing_rod_cast", "minecraft:container_open", "minecraft:explode", "minecraft:lightning_strike", "minecraft:piston_extend", "minecraft:shulker_open"
										]
									}
								},
								"required": ["event"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:equipped_item_action"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/equipped_item_action/"
							},
							"then": {
								"properties": {
									"equipment_slot": {
										"description": "Which equipped item to execute the action on. One of: \"mainhand\", \"offhand\", \"head\", \"chest\", \"legs\", \"feet\".",
										"enum": [ "mainhand", "offhand", "head", "chest", "legs", "feet" ]
									},
									"action": {
										"$ref": "#/definitions/actions/properties/item_action",
										"description": "The item action type to execute on the item stack in the specified equipment slot."
									}
								},
								"required": ["equipment_slot", "action"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:execute_command"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/execute_command/"
							},
							"then": {
								"properties": {
									"command": {
										"type": "string",
										"description": "The command to execute with the entity as the source (i.e. @s will select the entity itself)."
									},
									"permission_level": {
										"type": "integer",
										"description": "[Deprecated since 1.1.0]The permission level to use for the command. 0 is a \"survival player\", anything higher emulates some form of operator. See https://minecraft.fandom.com/wiki/Server.properties#op-permission-level for details.",
										"default": 4,
										"minimum": 0,
										"maximum": 4,
										"deprecated": true
									}
								},
								"required": ["command"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:exhaust"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/exhaust/"
							},
							"then": {
								"properties": {
									"amount": {
										"type": "number",
										"description": "The amount of exhaustion to apply to the player."
									}
								},
								"required": ["amount"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:explode"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/explode/"
							},
							"then": {
								"properties": {
									"power": {
										"type": "number",
										"description": "Determines the power of the explosion."
									},
									"destruction_type": {
										"enum": ["destroy", "break", "none"],
										"description": "Determines the effect of the explosion on the terrain.",
										"default": "break"
									},
									"damage_self": {
										"type": "boolean",
										"description": "Determines if the player should take damage from the summoned explosion.",
										"default": true
									},
									"indestructible": {
										"$ref": "#/definitions/conditions/properties/block_condition",
										"description": "If specified, the blocks that fulfills the specified block condition type is not destroyed by the summoned explosion."
									},
									"destructible": {
										"$ref": "#/definitions/conditions/properties/block_condition",
										"description": "If specified, the blocks that fulfills this specified block condition type are the only blocks that are destroyed by the summoned explosion."
									},
									"create_fire": {
										"type": "boolean",
										"description": "Determines if the explosion should create fire.",
										"default": false
									}
								},
								"required": ["power"],
								"not": {"required": ["indestructible", "destructible"]}
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:feed"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/feed/"
							},
							"then": {
								"properties": {
									"food": {
										"type": "integer",
										"description": "The amount of food points to restore."
									},
									"saturation": {
										"type": "number",
										"description": "The amount of saturation points to restore."
									}
								},
								"required": ["food", "saturation"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:gain_air"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/gain_air/"
							},
							"then": {
								"properties": {
									"value": {
										"type": "integer",
										"description": "The amount of breath to restore."
									}
								},
								"required": ["value"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:give"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/give/"
							},
							"then": {
								"properties": {
									"stack": {
										"$ref": "#/definitions/origins_data_types/properties/item_stack",
										"description": "The item stack to give to the entity."
									},
									"item_action": {
										"$ref": "#/definitions/actions/properties/item_action",
										"description": "If specified, the specified item action type will be executed on the item stack before it's given to the player."
									},
									"preferred_slot": {
										"description": "If specified, this will prioritize the action to put the item in the specified slot. Accepts \"chest\", \"feet\", \"head\", \"legs\", \"mainhand\" or \"offhand\".",
										"enum": ["chest", "feet", "head", "legs", "mainhand", "offhand"]
									}
								},
								"required": ["stack"]
							}
						},
						{
							"if": {
								"properties": { "type": { "enum": ["origins:grant_power", "origins:revoke_power"] } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/grant_power/ https://origins.readthedocs.io/en/latest/types/entity_action_types/revoke_power/"
							},
							"then": {
								"properties": {
									"power": {
										"type": "string",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"description": "The namespace and ID of the power to be granted/revoked to/from the entity.",
										"examples": ["origins:elytra"]
									},
									"source": {
										"type": "string",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"description": "The namespace and ID of the source of the power.",
										"examples": ["origins:elytrian"]
									}
								},
								"required": ["power", "source"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:heal"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/heal/"
							},
							"then": {
								"properties": {
									"amount": {
										"type": "number",
										"description": "The amount of health to restore."
									}
								},
								"required": ["amount"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:passenger_action"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/passenger_action/"
							},
							"then": {
								"properties": {
									"action": {
										"$ref": "#/definitions/actions/properties/entity_action",
										"description": "If set, executes the specified action on the passenger entity."
									},
									"bientity_action": {
										"$ref": "#/definitions/actions/properties/bientity_action",
										"description": "If set, executes the specified action that can execute on both the passenger and the entity that's being ridden."
									},
									"bientity_condition": {
										"$ref": "#/definitions/conditions/properties/bientity_condition",
										"description": "If set, only execute the specified actions if the bi-entity condition is fulfilled."
									},
									"recursive": {
										"type": "boolean",
										"description": "If set to true, executes the specified actions on all the passenger entities, if there are more than one.",
										"default": false
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:play_sound"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/play_sound/"
							},
							"then": {
								"properties": {
									"sound": {
										"type": "string",
										"description": "The namespace and ID of the sound to play.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["minecraft:entity.chicken.egg"]
									},
									"volume": {
										"type": "number",
										"description": "The volume of the sound.",
										"default": 1.0,
										"exclusiveMinimum": 0
									},
									"pitch": {
										"type": "number",
										"description": "The pitch of the sound.",
										"default": 1.0
									}
								},
								"required": ["sound"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:raycast"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/raycast/"
							},
							"then": {
								"properties": {
									"distance": {
										"type":"number",
										"description": "Determines the maximum distance the ray-cast will travel."
									},
									"block": {
										"type":"boolean",
										"default": true,
										"description": "Determines whether the ray-cast should include blocks."
									},
									"entity": {
										"type":"boolean",
										"default": true,
										"description": "Determines whether the ray-cast should include entities."
									},
									"shape_type": {
										"enum": ["collider", "outline", "visual"],
										"default": "visual",
										"description": "Determines how the ray-cast will handle blocks."
									},
									"fluid_handling": {
										"enum": ["any", "none", "source_only"],
										"default": "none",
										"description": "Determines how the ray-cast will handle fluids."
									},
									"bientity_condition": {
										"$ref": "#/definitions/conditions/properties/bientity_condition",
										"description": "If specified, the specified bi-entity action type will only be executed if the specified bi-entity condition type is fulfilled by either or both the 'actor' (the entity that has the power) or 'target' (the entity that was hit by the ray-cast)."
									},
									"bientity_action": {
										"$ref": "#/definitions/actions/properties/bientity_action",
										"description": "If specified, this bi-entity action type will be executed on either or both the 'actor' (the entity that has the power) or 'target' (the entity that was hit by the ray-cast)."
									},
									"block_action": {
										"$ref": "#/definitions/actions/properties/block_action",
										"description": "If specified, this block action type will be executed on the block the ray-cast has hit."
									},
									"before_action": {
										"$ref": "#/definitions/actions/properties/entity_action",
										"description": "If specified, execute this entity action type before casting a ray."
									},
									"hit_action": {
										"$ref": "#/definitions/actions/properties/entity_action",
										"description": "If specified, execute this entity action on the entity that executed the ray-cast if the ray-cast has hit an entity/block."
									},
									"miss_action": {
										"$ref": "#/definitions/actions/properties/entity_action",
										"description": "If specified, execute this entity action on the entity that executed the ray-cast if the ray-cast did not hit an entity/block."
									},
									"command_at_hit": {
										"type":"string",
										"description": "The command to execute upon the block/entity the ray-cast has hit."
									},
									"command_hit_offset": {
										"type":"number",
										"description": "Determines the offset of the command specified in the command_at_hit field."
									},
									"command_along_ray": {
										"type":"string",
										"description": "The command to execute for each step of the ray-cast.",
										"examples": ["particle minecraft:soul_fire_flame"]
									},
									"command_step": {
										"type":"number",
										"default":1.0,
										"description": "Determines the size of the step of the ray-cast."
									},
									"command_along_ray_only_on_hit": {
										"type":"boolean",
										"default":false,
										"description": "Determines if the command specified in the command_along_ray field should be executed only if the ray-cast has hit a block/entity."
									}
								},
								"required": ["distance"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:riding_action"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/riding_action/"
							},
							"then": {
								"properties": {
									"action": {
										"$ref": "#/definitions/actions/properties/entity_action",
										"description": "If set, executes the specified action on the entity that's been ridden."
									},
									"bientity_action": {
										"$ref": "#/definitions/actions/properties/bientity_action",
										"description": "If set, executes the specified action that can execute on both the passenger and the entity that's being ridden."
									},
									"bientity_condition": {
										"$ref": "#/definitions/conditions/properties/bientity_condition",
										"description": "If set, only execute the specified actions if the bi-entity condition is fulfilled."
									},
									"recursive": {
										"type": "boolean",
										"description": "If set to true, executes the specified actions on all entities that are being ridden, if there are more than one.",
										"default": false
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:set_fall_distance"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"fall_distance": {
										"type": "number",
										"description": "The desired fall distance value."
									}
								},
								"required": ["fall_distance"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:set_on_fire"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/set_on_fire/"
							},
							"then": {
								"properties": {
									"duration": {
										"type": "integer",
										"description": "The amount of seconds the entity should burn.",
										"minimum": 0
									}
								},
								"required": ["duration"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:spawn_effect_cloud"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/spawn_effect_cloud/"
							},
							"then": {
								"properties": {
									"radius": {
										"type": "number",
										"description": "The radius of the cloud.",
										"default": 3,
										"exclusiveMinimum": 0
									},
									"radius_on_use": {
										"type": "number",
										"description": "How much the radius should change when an effect is applied.",
										"default": -0.5
									},
									"wait_time": {
										"type": "integer",
										"description": "How many ticks to wait until the cloud takes effect.",
										"default": 10,
										"minimum": 0
									},
									"effect": {
										"$ref": "#/definitions/origins_data_types/properties/status_effect_instance",
										"description": "If set, this status effect will be applied by the cloud to entities inside of it."
									},
									"effects": {
										"type": "array",
										"description": "If set, these status effects will be applied by the cloud to entities inside of it.",
										"items": {"$ref": "#/definitions/origins_data_types/properties/status_effect_instance"},
										"minItems": 1
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:spawn_entity"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/spawn_entity/"
							},
							"then": {
								"properties": {
									"entity_type": {
										"type": "string",
										"description": "The namespace and ID of the entity type that will be spawned.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["minecraft:zombie"]
									},
									"tag": {
										"$comment": "TODO find pattern for tags",
										"type": "string",
										"description": "If specified, this NBT data will be applied to the entity that will be spawned."
									},
									"entity_action": {
										"$ref": "#/definitions/actions/properties/entity_action",
										"description": "If specified, the specified entity action type will be executed on the entity that will be spawned when it is spawned."
									}
								},
								"required": ["entity_type"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:spawn_particles"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/spawn_particles/"
							},
							"then": {
								"properties": {
									"particle": {
										"$ref": "#/definitions/origins_data_types/properties/particle_effect",
										"description": "The particle type that will be spawned."
									},
									"count": {
										"type":"integer",
										"description": "How much of the specified particle type will be spawned."
									},
									"speed": {
										"type":"number",
										"description": "Determines the speed of the specified particle type.",
										"default": 0.0
									},
									"force": {
										"type":"boolean",
										"description": "If set to true, the specified particle type that will be spawned can be seen from a far distance.",
										"default":false
									},
									"spread": {
										"$ref": "#/definitions/origins_data_types/properties/vector",
										"description": "Determines the size of the three-dimensional cuboid volume to spawn the specified particle type in.",
										"default": {"x": 0.5, "y": 0.25, "z": 0.5}
									},
									"offset_y": {
										"type":"number",
										"description": "The offset of where the particle will be centered in the Y axis.",
										"default": 0.5
									}
								},
								"required": ["particle", "count"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:swing_hand"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/swing_hand/"
							},
							"then": {
								"properties": {
									"hand": {
										"description": "Determines which hand is swung. Accepts either \"MAIN_HAND\", \"OFF_HAND\"",
										"enum": ["MAIN_HAND", "OFF_HAND"],
										"default": "MAIN_HAND"
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:toggle"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/toggle/"
							},
							"then": {
								"properties": {
									"power": {
										"type": "string",
										"description": "The namespace and ID of the power that uses the origins:toggle power type.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["origins:phantomize"]
									}
								},
								"required": ["power"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:trigger_cooldown"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"power": {
										"type": "string",
										"description": "The namespace and ID of the power that will be triggered.",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"examples": ["origins:launch_into_air"]
									}
								},
								"required": ["power"]
							}
						}
					]
				},
				"item_action": {
					"type": "object",
					"description": "Item Actions operate on a stack of items.",
					"properties": {
						"type": {
							"type": "string",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
							"examples": [
								"origins:and", "origins:chance", "origins:choice", "origins:delay",
								"origins:if_else_list", "origins:if_else", "origins:nothing",
								"origins:consume", "origins:damage", "origins:modify"
							]
						}
					},
					"required": ["type"],
					"allOf": [
						{
							"$comment": "#region meta",
							"if": {
								"properties": { "type": {"const":"origins:and"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"actions": {
										"type": "array",
										"description": "These actions will be executed one after the other (but in the same tick).\nSee https://origins.readthedocs.io/en/latest/types/meta_action_types/and/",
										"items": {"$ref": "#/definitions/actions/properties/item_action"},
										"minItems": 1
									}
								},
								"required": ["actions"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:chance"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/chance/"
							},
							"then": {
								"properties": {
									"action": {
										"$ref": "#/definitions/actions/properties/item_action",
										"description": "The action which might be executed."
									},
									"chance": {
										"type": "number",
										"description": "The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance).",
										"exclusiveMinimum": 0,
										"exclusiveMaximum": 1
									},
									"fail_action": {
										"$ref": "#/definitions/actions/properties/item_action",
										"description": "The action to execute if the specified action in the action field is not executed."
									}
								},
								"required": ["action", "chance"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:choice"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/choice/"
							},
							"then": {
								"properties": {
									"actions": {
										"type": "array",
										"description": "Executes one of the provided actions, choosing randomly based on the assigned weights. The actions with higher weight values are more likely to be chosen.\nweight / sumOfAllWeights = chance",
										"items": {
											"type": "object",
											"properties": {
												"element": {"$ref": "#/definitions/actions/properties/item_action"},
												"weight": {"type": "integer"}
											},
											"required": ["element", "weight"]
										},
										"minItems": 2
									}
								},
								"required": ["actions"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:delay"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/delay/"
							},
							"then": {
								"properties": {
									"action": {
										"$ref": "#/definitions/actions/properties/item_action",
										"description": "The action which will be executed after the delay."
									},
									"ticks": {
										"type":"integer",
										"description": "The amount of ticks until the action is executed.\nDelaying an action for more than a few ticks is not recommended! This meta action type is not reliable for such task.\nSee https://origins.readthedocs.io/en/latest/types/meta_action_types/delay/"
									}
								},
								"required": ["action", "ticks"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:if_else_list"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"actions": {
										"type": "array",
										"description": "Checks a list of actions associated with conditions, and executes the first one in the list for which the condition holds. Basically a less indentation-heavy way to represent a deeply nested If-Else (Meta Action Type).\nSee https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list/",
										"items": {
											"type": "object",
											"properties": {
												"action": {"$ref": "#/definitions/actions/properties/item_action"},
												"condition": {"$ref": "#/definitions/conditions/properties/item_condition"}
											},
											"required": ["action", "condition"]
										},
										"minItems": 2
									}
								},
								"required": ["actions"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:if_else"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else/"
							},
							"then": {
								"properties": {
									"condition": {
										"$ref": "#/definitions/conditions/properties/item_condition",
										"description": "A condition based on the type of action."
									},
									"if_action": {
										"$ref": "#/definitions/actions/properties/item_action",
										"description": "The action which is executed when the condition evaluates to true."
									},
									"else_action": {
										"$ref": "#/definitions/actions/properties/item_action",
										"description": "If present, this action will be executed when the condition evaluates to false."
									}
								},
								"required": ["condition", "if_action"]
							},
							"$comment": "#endregion meta"
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:consume"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/item_action_types/consume/"
							},
							"then": {
								"properties": {
									"amount": {
										"type": "integer",
										"description": "The amount of items to remove.",
										"default": 1,
										"minimum": 1
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:damage"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"amount": {
										"type": "integer",
										"description": "The amount of damage it should do to the item stack.",
										"default": 1
									},
									"ignore_unbreaking": {
										"type": "boolean",
										"description": "Determines if this action should ignore the Unbreaking enchantment.",
										"default": false
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"origins:modify"} },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/types/item_action_types/modify/"
							},
							"then": {
								"properties": {
									"modifier": {
										"type": "string",
										"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
										"description": "The ID of an item modifier."
									}
								},
								"required": ["modifier"]
							}
						}
					]
				}
			}
		},
		"origins_data_types": {
			"type": "object",
			"description": "Group for https://origins.readthedocs.io/en/latest/data_types/",
			"$comment": "As Comparison and Modifier Operation are basicaly just enum's and badges are only used once they are not included in this list.",
			"properties": {
				"modifier": {
					"type": "object",
					"description": "An Object used to specify how a value should be modified.",
					"properties": {
						"operation": {
							"description": "The operation which will be performed by this modifier.",
							"enum": ["addition", "multiply_base", "multiply_total"]
						},
						"value": {
							"type": "number",
							"description": "The value with which to apply the operation to the value."
						},
						"name": {
							"type": "string",
							"description": "A descriptive name for the modifier, describing where it comes from."
						}
					},
					"required": ["operation", "value"]
				},
				"attributed_modifier": {
					"type": "object",
					"description": "An Object used to specify how a specific attribute should be modified.\nBasically an Attribute Modifier with an additional attribute field.",
					"properties": {
						"attribute": {
							"type": "string",
							"description": "ID of the attribute which will be modified by this modifier.",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
							"examples": ["minecraft:generic.attack_speed"]
						},
						"operation": {
							"description": "The operation which will be performed by this modifier.",
							"enum": ["addition", "multiply_base", "multiply_total"]
						},
						"value": {
							"type": "number",
							"description": "The value with which to apply the operation to the value."
						},
						"name": {
							"type": "string",
							"description": "A descriptive name for the modifier, describing where it comes from."
						}
					},
					"required": ["attribute", "operation", "value"]
				},
				"crafting_recipe": {
					"type": "object",
					"description": "An Object specifying a shapeless or shaped crafting recipe. For some more information, See https://minecraft.gamepedia.com/Recipe",
					"properties": {
						"type": {
							"description": "The type of recipe. Either `minecraft:crafting_shaped` or `minecraft:crafting_shapeless`. Other recipe types are not supported.",
							"enum": ["minecraft:crafting_shaped", "minecraft:crafting_shapeless"]
						},
						"id": {
							"type": "string",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
							"description": "An ID for this recipe. Has to be unique among all recipes, otherwise there will be a conflict."
						},
						"result": {
							"type": "object",
							"description": "The result of the crafting. Note that vanilla does not support NBT tags in the result.",
							"properties": {
								"item": {
									"type": "string",
									"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$"
								},
								"count": {
									"type": "integer",
									"minimum": 1
								}
							},
							"required": ["item", "count"],
							"additionalProperties": false
						}
					},
					"required": ["type", "id", "result"],
					"additionalProperties": false,
					"allOf": [
						{
							"if": {
								"properties": { "type": {"const":"minecraft:crafting_shapeless"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"ingredients": {
										"type": "array",
										"description": "These items need to be put in the crafting grid for the recipe.",
										"items": {"$ref": "#/definitions/origins_data_types/properties/ingredient"},
										"uniqueItems": false,
										"minItems": 1
									}
								},
								"required": ["ingredients"]
							}
						},
						{
							"if": {
								"properties": { "type": {"const":"minecraft:crafting_shaped"} },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"pattern": {
										"$comment": "As some mods add crafting tables with larger than 3 by 3 grids I've not added a maxItems restiction",
										"type": "array",
										"description": "Specifies the pattern, with each element representing one row. Use a single character to describe one item. A space means that position is empty.",
										"items": {"type": "string"},
										"minItems": 1
									},
									"key": {
										"type": "object",
										"patternProperties": {
											"^[^\\ ]$": {"$ref": "#/definitions/origins_data_types/properties/ingredient"}
										},
										"additionalProperties": false,
										"minProperties": 1
									}
								},
								"required": ["pattern", "key"]
							}
						}
					]
				},
				"damage_source": {
					"type": "object",
					"description": "The damage source to be used. Controls e.g. the death message, invulnerabilities (e.g. towards fire), or whether armor is taken into account.",
					"properties": {
						"name": {
							"type": "string",
							"description": "The name of the damage source.\nControls death message as well as other interactions.\nConsider https://origins.readthedocs.io/en/latest/misc/extras/damage_source_names/ when picking a name.",
							"examples": [
								"anvil.player", "anvil", "arrow.item", "arrow", "badRespawnPoint",
								"cactus.player", "cactus", "cramming.player", "cramming",
								"dragonBreath.player", "dragonBreath", "drown.player", "drown",
								"dryout.player", "dryout", "even_more_magic", "explosion.player",
								"explosion", "fall.player", "fall", "fallingBlock.player",
								"fallingBlock", "fallingStalactite.player", "fallingStalactite",
								"fireball.item", "fireball", "fireworks.item", "fireworks.player",
								"fireworks", "flyIntoWall.player", "flyIntoWall", "freeze.player",
								"freeze", "generic.player", "generic", "hotFloor.player", "hotFloor",
								"indirectMagic.item", "indirectMagic", "inFire.player", "inFire",
								"inWall.player", "inWall", "lava.player", "lava",
								"lightningBolt.player", "lightningBolt", "magic.player", "magic",
								"mob.item", "mob", "onFire.player", "onFire", "outOfWorld.player",
								"outOfWorld", "player.item", "player", "stalagmite.player",
								"stalagmite", "starve.player", "starve", "sting.item", "sting.player",
								"sting", "sweetBerryBush.player", "sweetBerryBush", "thorns.item",
								"thorns", "thrown.item", "trident.item", "trident", "wither.player",
								"wither", "witherSkull",
								"genericDamageOverTime.player", "genericDamageOverTime",
								"hurt_by_water.player", "hurt_by_water", "no_water_for_gills.player",
								"no_water_for_gills"
							]
						},
						"bypasses_armor": {
							"type": "boolean",
							"description": "When true, armor values are not taken into account when calculating the actual damage amount taken.",
							"default": false
						},
						"fire": {
							"type": "boolean",
							"description": "When true, the damage will be considered fire damage.",
							"default": false
						},
						"unblockable": {
							"type": "boolean",
							"description": "When true, the damage will be unblockable (not reduced by resistance effects or protection enchantments).",
							"default": false
						},
						"magic": {
							"type": "boolean",
							"description": "When true, the damage will be considered magic damage.",
							"default": false
						},
						"out_of_world": {
							"type": "boolean",
							"description": "When true, the damage will be considered \"out of world\" damage, i.e. damage from falling into the void.",
							"default": false
						}
					},
					"required": ["name"],
					"additionalProperties": false
				},
				"hud_render": {
					"type": "object",
					"description": "An Object used to define how a resource or cooldown bar should be rendered.",
					"properties": {
						"should_render": {
							"type": "boolean",
							"description": "Whether the bar should be visible or not.",
							"default": true
						},
						"sprite_location": {
							"type": "string",
							"description": "The path to the file in the assets which contains what the bar looks like. See https://origins.readthedocs.io/en/latest/misc/extras/sprites/ for a list of files included by default in the mod.",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
							"default": "origins:textures/gui/resource_bar.png",
							"examples": [
								"origins:textures/gui/resource_bar.png",
								"origins:textures/gui/community/spiderkolo/resource_bar_01.png",
								"origins:textures/gui/community/spiderkolo/resource_bar_02.png",
								"origins:textures/gui/community/spiderkolo/resource_bar_03.png",
								"origins:textures/gui/community/spiderkolo/resource_bar_points_01.png",
								"origins:textures/gui/community/huang/resource_bar_01.png",
								"origins:textures/gui/community/huang/resource_bar_02.png"
							]
						},
						"bar_index": {
							"type": "integer",
							"description": "The indexed position of the bar on the sprite to use. Please note that indexes start at 0.",
							"default": 0,
							"minimum": 0
						},
						"condition": {
							"$ref": "#/definitions/conditions/properties/entity_condition",
							"description": "If set (and should_render is true), the bar will only display when the entity with the power fulfills this condition."
						},
						"inverted": {
							"type":"boolean",
							"description": "If set to true, inverts the way the hud render process (it'll look like its value is being decreased).",
							"default":false
						}
					}
				},
				"ingredient": {
					"type": ["object", "array"],
					"description": "Either: an Object specifying a registered item or item tag. Or: an Array of Objects specifying a registered item or item tag.",
					"items": {
						"type": "object",
						"properties": {
							"item": {
								"type": "string",
								"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
								"description": "ID of a registered item."
							},
							"tag": {
								"type": "string",
								"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
								"description": "ID of an item tag.\nWill be ignored if item is set."
							}
						},
						"anyOf": [
							{"required": ["item"]},
							{"required": ["tag"]}
						]
					},
					"properties": {
						"item": {
							"type": "string",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
							"description": "ID of a registered item."
						},
						"tag": {
							"type": "string",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
							"description": "ID of an item tag.\nWill be ignored if item is set."
						}
					},
					"additionalProperties": false,
					"anyOf": [
						{"required": ["item"]},
						{"required": ["tag"]},
						{"minItems": 2}
					]
				},
				"item_stack": {
					"type": "object",
					"description": "An Object which defines a new item stack.\nSee: https://origins.readthedocs.io/en/latest/types/data_types/item_stack/",
					"properties": {
						"item": {
							"type": "string",
							"description": "ID of a registered item.",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$"
						},
						"amount": {
							"type": "integer",
							"description": "Size of the stack.",
							"default": 1,
							"minimum": 1
						},
						"tag": {
							"$comment": "Is there a better pattern for NBT data?",
							"type": "string",
							"description": "NBT data of the item.",
							"pattern": "\\{.*\\:.*\\}"
						}
					},
					"required": ["item"],
					"additionalProperties": false
				},
				"key": {
					"type": "object",
					"description": "An Object which defines a keybinding, used in active powers to define which key they react to.",
					"properties": {
						"key": {
							"type": "string",
							"description": "A string specifying the keybinding.\nSee https://origins.readthedocs.io/en/latest/misc/extras/keybindings/ for possible values.",
							"pattern": "^[a-z0-9\\-\\_\\.]+$",
							"examples": [
								"key.origins.primary_active", "key.origins.secondary_active", "key.origins.view_origin",
								"key.sprint", "key.forward", "key.left", "key.back", "key.right", "key.jump", "key.inventory", "key.drop",
								"key.swapOffhand", "key.chat", "key.sneak", "key.playerlist", "key.attack", "key.use", "key.pickItem", "key.command",
								"key.screenshot", "key.togglePerspective", "key.smoothCamera", "key.fullscreen", "key.spectatorOutlines",
								"key.hotbar.1", "key.hotbar.2", "key.hotbar.3", "key.hotbar.4", "key.hotbar.5", "key.hotbar.6", "key.hotbar.7", "key.hotbar.8", "key.hotbar.9",
								"key.saveToolbarActivator", "key.loadToolbarActivator", "key.advancements"
							]
						},
						"continuous": {
							"type": "boolean",
							"description": "Whether the keybinding should only trigger the power on the first tick the key is held down, or, if set to true, continuously on each tick while the key is held.",
							"default": false
						}
					},
					"required": ["key"],
					"additionalProperties": false
				},
				"particle_effect": {
					"type": ["object", "string"],
					"description": "Either a String which defines the particle type or an Object which defines the particle type and its additional parameters.",
					"properties": {
						"type": {
							"type": "string",
							"description": "The namespace and ID of the particle type.",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$"
						},
						"params": {
							"type":"string",
							"description": "The additional parameter for the particle type."
						}
					},
					"required": ["type", "params"],
					"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
					"examples": ["minecraft:happy_villager", {"type":"minecraft:dust","params":"0.922 0.314 0.314 2"}, {"type":"minecraft:block","params":"minecraft:ice"}]
				},
				"positioned_item_stack": {
					"type": "object",
					"description": "An Object which defines a new item stack alongside a position in an inventory. Basically an Item Stack with a slot field.",
					"properties": {
						"item": {
							"type": "string",
							"description": "ID of a registered item.",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$"
						},
						"amount": {
							"type":"integer",
							"description": "Size of the stack.",
							"default": 1,
							"minimum": 1
						},
						"tag": {
							"$comment": "Is there a better pattern for NBT data?",
							"type": "string",
							"description": "NBT data of the item.",
							"pattern": "\\{.*\\:.*\\}"
						},
						"slot": {
							"$comment": "Because certian mods add inventory slots I've not specified a maximum",
							"type": "integer",
							"description": "Inventory slot position of the stack.\nIf not specified, will be the first free slot in the inventory.\nSee https://origins.readthedocs.io/en/latest/misc/extras/positioned_item_stack_slots/ for possible values",
							"minimum": 0
						}
					},
					"required": ["item"],
					"additionalProperties": false
				},
				"status_effect_instance": {
					"type": "object",
					"properties": {
						"effect": {
							"type": "string",
							"description": "ID of the status effect.",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
							"examples": ["minecraft:slowness", "minecraft:levitation", "minecraft:slow_falling"]
						},
						"duration": {
							"type": "integer",
							"description": "Duration of the status effect in ticks.",
							"default": 100,
							"minimum": 1
						},
						"amplifier": {
							"type": "integer",
							"description": "Amplifier of the status effect.",
							"default": 0
						},
						"is_ambient": {
							"type": "boolean",
							"description": "Whether the effect counts as an ambient effect.",
							"default": false
						},
						"show_particles": {
							"type": "boolean",
							"description": "Whether the status effect will spawn particles on the player.",
							"default": true
						},
						"show_icon": {
							"type": "boolean",
							"description": "Whether the status effect will show an icon on the HUD.",
							"default": true
						}
					},
					"required": ["effect"],
					"additionalProperties": false
				},
				"vector": {
					"type":"object",
					"description": "An Object that specifies the X, Y and Z coordinates of a certain point in space.\nSee https://origins.readthedocs.io/en/latest/types/data_types/vector/",
					"properties": {
						"x": {
							"type":"number",
							"description": "The X coordinate of the point.",
							"default": 0.0
						},
						"y": {
							"type":"number",
							"description": "The Y coordinate of the point.",
							"default": 0.0
						},
						"z": {
							"type":"number",
							"description": "The Z coordinate of the point.",
							"default": 0.0
						}
					}
				}
			}
		}
	},
	"allOf": [
		{
			"$comment": "#region Regular types",
			"if": {
				"properties": { "type": {"const":"origins:attribute_modify_transfer"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/attribute_modify_transfer/"
			},
			"then": {
				"properties": {
					"class": {
						"type": "string",
						"description": "The ID of the class to transfer the value of an attribute modifier to. See https://origins.readthedocs.io/en/latest/misc/extras/value_modifying_power_classes/ for possible values.",
						"pattern": "^[a-z0-9\\-_\\./]+$",
						"examples": [
							"modify_air_speed", "modify_break_speed", "modify_crafting", "modify_damage_dealt", "modify_damage_taken",
							"modify_exhaustion", "modify_xp_gain", "modify_jump", "modify_lava_speed", "modify_projectile_damage",
							"modify_slipperiness", "modify_status_effect_amplifier", "modify_status_effect_duration", "modify_swim_speed"
						]
					},
					"attribute": {
						"type": "string",
						"description": "The namespace and ID of the attribute to transfer the value from.\nRefer to the https://minecraft.fandom.com/wiki/Attribute page for a list of vanilla attributes that you can get the value from.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": [
							"minecraft:generic.max_health", "minecraft:generic.follow_range",
							"minecraft:generic.knockback_resistance", "minecraft:generic.movement_speed",
							"minecraft:generic.attack_damage", "minecraft:generic.armor",
							"minecraft:generic.armor_toughness", "minecraft:generic.attack_knockback",
							"minecraft:generic.attack_speed", "minecraft:generic.luck",
							"minecraft:horse.jump_strength",
							"minecraft:generic.flying_speed",
							"minecraft:zombie.spawn_reinforcements"
						]
					},
					"multiplier": {
						"type": "number",
						"description": "Determines the multiplier for the value.",
						"default": 1.0
					}
				},
				"required": ["class", "attribute"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:attribute"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/attribute/"
			},
			"then": {
				"properties": {
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/attributed_modifier",
						"description": "If specified, this modifier will be applied to their corresponding attribute."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will be applied to their corresponding attributes.",
						"items": {"$ref": "#/definitions/origins_data_types/properties/attributed_modifier"}
					},
					"update_health": {
						"type": "boolean",
						"description": "When true, the player's health percentage will update to match their new maximum health.",
						"default": true
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:burn"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/burn/"
			},
			"then": {
				"properties": {
					"interval": {
						"type": "integer",
						"description": "Interval between being set on fire, in ticks.",
						"minimum": 1
					},
					"burn_duration": {
						"type": "integer",
						"description": "Determines how long the fire should last on the entity each time it is set, in seconds.",
						"minimum": 0
					}
				},
				"required": ["interval", "burn_duration"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:climbing"} },
				"required": ["type"]
			},
			"then": {
				"properties": {
					"allow_holding": {
						"type": "boolean",
						"description": "If true, the entity that has the power is able to hold onto blocks.\nSee https://origins.readthedocs.io/en/latest/types/power_types/climbing/",
						"default": true
					},
					"hold_condition": {
						"$ref": "#/definitions/conditions/properties/entity_condition",
						"description": "If specified and `allow_holding` is true, the entity that has the power will be able to 'hold onto the block' (not affected by gravity) if the entity is sneaking and if this condition is fulfilled."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:conditioned_attribute"} },
				"required": ["type"]
			},
			"then": {
				"properties": {
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/attributed_modifier",
						"description": "If specified, this modifier will be applied to their corresponding attribute."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will be applied to their corresponding attributes.",
						"items": {"$ref": "#/definitions/origins_data_types/properties/attributed_modifier"}
					},
					"tick_rate": {
						"type": "integer",
						"description": "The frequency (in ticks) with which to check the condition. Lower values mean the condition changes are detected more quickly, but this comes at a potentially huge performance cost.",
						"default": 20
					},
					"update_health": {
						"type": "boolean",
						"description": "Determines whether the health percentage will update to match the entity's new maximum health.",
						"default": true
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:conditioned_restrict_armor"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/conditioned_restrict_armor/"
			},
			"then": {
				"properties": {
					"head": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If specified, items which fulfills this condition cannot be equipped in the head equipment slot."
					},
					"chest": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If specified, items which fulfills this condition cannot be equipped in the chest equipment slot."
					},
					"legs": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If specified, items which fulfills this condition cannot be equipped in the legs equipment slot."
					},
					"feet": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If specified, items which fulfills this condition cannot be equipped in the feet equipment slot."
					},
					"tick_rate": {
						"type": "integer",
						"description": "The frequency (in ticks) with which to check the condition. Lower values mean the condition changes are detected more quickly, but this comes at a potentially huge performance cost.",
						"default": 80
					}
				},
				"anyOf": [
					{"required": ["head"]},
					{"required": ["chest"]},
					{"required": ["legs"]},
					{"required": ["feet"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:cooldown"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/cooldown/"
			},
			"then": {
				"properties": {
					"cooldown": {
						"type": "integer",
						"description": "Cooldown duration in ticks.",
						"minimum": 1
					},
					"hud_render": {"$ref": "#/definitions/origins_data_types/properties/hud_render"}
				},
				"required": ["cooldown", "hud_render"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:damage_over_time"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/damage_over_time/"
			},
			"then": {
				"properties": {
					"interval": {
						"type": "integer",
						"description": "Duration of ticks to wait between the damage.",
						"minimum": 0
					},
					"onset_delay": {
						"type": "integer",
						"description": "How many ticks the power has to be active in order to apply the first damage.\nIf not set, this will be equal to `interval`.",
						"minimum": 0
					},
					"damage": {
						"type": "number",
						"description": "How much damage will be dealt each interval."
					},
					"damage_easy": {
						"type": "number",
						"description": "How much damage will be dealt each interval on Easy difficulty.\nIf not set, this will be equal to `damage`."
					},
					"damage_source": {"$ref": "#/definitions/origins_data_types/properties/damage_source"},
					"protection_enchantment": {
						"type": "string",
						"description": "If set, the total amount of levels of this enchantment will be counted on the player's armor to increase the `onset_delay`.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$"
					},
					"protection_effectiveness": {
						"type": "number",
						"description": "If `protection_enchantment` is set, this multiplier scales how effective it will be (1.0 = time the `onset_delay` is increased is the same as with Hydrophobia and Water Protection).",
						"default": 1.0
					}
				},
				"required": ["interval", "damage"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:effect_immunity"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/effect_immunity/"
			},
			"then": {
				"properties": {
					"effect": {
						"type": "string",
						"description": "If specified, the status effect with this namespace and ID can not be applied to the entity that has the power.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:weakness", "minecraft:strength"]
					},
					"effects": {
						"type": "array",
						"description": "If specified, the status effects with the specified namespace and IDs can not be applied to the entity that has the power.",
						"items": {
							"type": "string",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
							"examples": ["minecraft:weakness", "minecraft:strength"]
						},
						"minItems": 2
					}
				},
				"oneOf": [
					{"required": ["effect"]},
					{"required": ["effects"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:elytra_flight"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/elytra_flight/"
			},
			"then": {
				"properties": {
					"render_elytra": {
						"type": "boolean",
						"description": "Whether an Elytra should render on the player's back while this power is active."
					},
					"texture_location": {
						"type": "string",
						"description": "If specified, this will be the texture used by the Elytra granted by this power.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$"
					}
				},
				"required": ["render_elytra"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:entity_glow"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/entity_glow/"
			},
			"then": {
				"properties": {
					"entity_condition": {
						"$ref": "#/definitions/conditions/properties/entity_condition",
						"description": "If specified, only entities which fulfill this condition will glow for the player that has the power."
					},
					"bientity_condition": {
						"$ref": "#/definitions/conditions/properties/bientity_condition",
						"description": "If specified, the power will only be active if this condition is fulfilled by either or both the 'actor' (the player that has the power) and 'target' (the entity that would glow) entities."
					},
					"use_teams": {
						"type":"boolean",
						"description": "Determines whether glowing entities should use their team's color with their glow. If set to false, the entity will instead use the `red`, `green` and `blue` fields within this power type.",
						"default":true
					},
					"red": {
						"type":"number",
						"description": "Value by which the red component of the glow will be multiplied. Range: 0.0 - 1.0.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"green": {
						"type":"number",
						"description": "Value by which the green component of the glow will be multiplied. Range: 0.0 - 1.0.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"blue": {
						"type":"number",
						"description": "Value by which the blue component of the glow will be multiplied. Range: 0.0 - 1.0.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:entity_group"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/entity_group/"
			},
			"then": {
				"properties": {
					"group": {
						"description": "The group to associate with the player. One of `default`, `undead`, `arthropod`, `illager`, or `aquatic`.\nSee https://minecraft.fandom.com/wiki/Mob#Classification for more information about the entity groups",
						"enum": ["default", "undead", "arthropod", "illager", "aquatic"]
					}
				},
				"required": ["group"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:exhaust"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/exhaust/"
			},
			"then": {
				"properties": {
					"interval": {
						"type": "integer",
						"description": "Duration of ticks to wait between applying exhaustion.",
						"minimum": 1
					},
					"exhaustion": {
						"type": "number",
						"description": "How much exhaustion will be applied each interval."
					}
				},
				"required": ["interval", "exhaustion"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:fire_projectile"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/fire_projectile/"
			},
			"then": {
				"properties": {
					"entity_type": {
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"description": "The ID of the entity type that will be fired."
					},
					"cooldown": {
						"type": "integer",
						"description": "Interval of ticks this power needs to recharge before the power can be triggered again.",
						"minimum": 1
					},
					"hud_render": {"$ref": "#/definitions/origins_data_types/properties/hud_render"},
					"count": {
						"type": "integer",
						"description": "The amount of projectiles to fire each use.",
						"default": 1,
						"minimum": 0
					},
					"interval": {
						"type":"integer",
						"description": "Determines the interval for firing multiple projectiles consecutively (in ticks).\nIf set to 0, it will fire all the projectiles at the same tick.",
						"default":0
					},
					"start_delay": {
						"type":"integer",
						"description": "Determines how long the start of the firing process is delayed (in ticks).",
						"default":0
					},
					"speed": {
						"type":"number",
						"description": "The speed applied to the fired projectile.",
						"default": 1.5
					},
					"divergence": {
						"type":"number",
						"description": "How much each projectile fired is affected by random spread.",
						"default": 1.0
					},
					"sound": {
						"type":"string",
						"description": "If set, the sound with this ID will be played when the power is used.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$"
					},
					"tag": {
						"type": "string",
						"description": "NBT data of the entity.",
						"pattern": "\\{.*\\:.*\\}"
					},
					"key": {
						"$ref": "#/definitions/origins_data_types/properties/key",
						"description": "Which active key this power should respond to.\nIf none is specified, this power will use the primary active power key (by default G).\nThe default value is technically `{\"key\": \"none\"}` but Origins adds a power key mapping none to the primary key.",
						"default": {"key": "key.origins.primary_active"}
					}
				},
				"required": ["entity_type", "cooldown", "hud_render"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:inventory"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/inventory/"
			},
			"then": {
				"properties": {
					"name": {
						"type": "string",
						"description": "The translation key or literal text to use as the display name for the inventory.",
						"pattern": "^[a-z0-9\\-_\\./]+$",
						"default": "container.inventory"
					},
					"drop_on_death": {
						"type": "boolean",
						"default": false,
						"description": "When this is set to true, the player will drop the items in the inventory on death (vanishing items will vanish!)."
					},
					"drop_on_death_filter": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If this is set, only item stacks matching this condition will be dropped on death."
					},
					"key": {
						"$ref": "#/definitions/origins_data_types/properties/key",
						"description": "Which active key this power should respond to.\nIf none is specified, this power will use the primary active power key (by default G).\nThe default value is technically `{\"key\": \"none\"}` but Origins adds a power key mapping none to the primary key.",
						"default": {"key": "key.origins.primary_active"}
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:invisibility"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/invisibility/"
			},
			"then": {
				"properties": {
					"render_armor": {
						"type": "boolean",
						"description": "Whether or not the player's armor should be shown."
					}
				},
				"required": ["render_armor"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:invulnerability"} },
				"required": ["type"]
			},
			"then": {
				"properties": {
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/damage_condition",
						"description": "Specifies which damage the player will be immune to.\nNOTE: This power type does not support the Amount (Damage Condition Type). See https://origins.readthedocs.io/en/latest/types/power_types/invulnerability/"
					}
				},
				"required": ["damage_condition"],
				"$comment": "Find a better way to implement \"not\":{\"damage_condition\":{\"type\":{\"const\":\"origins:amount\"}}}"
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:item_on_item"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/item_on_item/"
			},
			"then": {
				"properties": {
					"using_item_condition": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If specified, the specified actions will only execute if this condition is fulfilled by the item that is used to right-click an item."
					},
					"on_item_condition": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If specified, the specified actions will only execute if this condition is fulfilled by the item that has been right-clicked."
					},
					"result": {
						"$ref": "#/definitions/origins_data_types/properties/item_stack",
						"description": "If specified, this item will be given to the player."
					},
					"result_from_on_stack": {
						"type":"integer",
						"description": "Determines how many items based on the `on_item` stack will be given as a result for using an item on an item. Mostly to be used in conjunction with `result_item_action`.",
						"default":0
					},
					"using_item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If specified, this action will be executed on the item that is used to right-click an item."
					},
					"on_item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If specified, this action will be executed on the item that has been right-clicked."
					},
					"result_item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If specified, this action will be executed on the item that is given to the player."
					},
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If specified, this action will be executed on the player after they used an item on an item."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:keep_inventory"} },
				"required": ["type"]
			},
			"then": {
				"properties": {
					"item_condition": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If specified, only make the items that fulfill the specified item condition type persist in the entity's inventory."
					},
					"slots": {
						"type": "array",
						"description": "If specified, only make the items that are in the listed inventory slots persist in the entity's inventory.\nSee https://origins.readthedocs.io/en/latest/misc/positioned_item_stack_slots/ for possible values.",
						"items": {
							"$comment": "Because certian mods add inventory slots I've not specified a maximum",
							"type": "integer",
							"minimum": 0
						}
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:launch"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/launch/"
			},
			"then": {
				"properties": {
					"cooldown": {
						"type": "integer",
						"description": "Interval of ticks this power needs to recharge before the power can be triggered again.",
						"minimum": 1
					},
					"speed": {
						"type": "number",
						"description": "The speed applied to the player in the upwards direction."
					},
					"hud_render": {"$ref": "#/definitions/origins_data_types/properties/hud_render"},
					"sound": {
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"description": "If specified, the sound event with this namespace and ID will be played when the power is triggered."
					},
					"key": {
						"$ref": "#/definitions/origins_data_types/properties/key",
						"description": "Which active key this power should respond to.",
						"default": {"key": "key.origins.primary_active"}
					}
				},
				"required": ["cooldown", "speed", "hud_render"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:lava_vision"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/lava_vision/"
			},
			"then": {
				"properties": {
					"s": {
						"type": "number",
						"description": "Near view. Vanilla default is 0.25, or 0.0 if you are under the effect of Fire Resistance."
					},
					"v": {
						"type": "number",
						"description": "Far view. Vanilla default is 1.0, or 3.0 if you are under the effect of Fire Resistance."
					}
				},
				"required": ["s", "v"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:model_color"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/model_color/"
			},
			"then": {
				"properties": {
					"red": {
						"type": "number",
						"description": "Value by which the red component of the texture will be multiplied.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"green": {
						"type": "number",
						"description": "Value by which the green component of the texture will be multiplied.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"blue": {
						"type": "number",
						"description": "Value by which the blue component of the texture will be multiplied.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"alpha": {
						"type": "number",
						"description": "Value by which the alpha (= transparency) component of the texture will be multiplied.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					}
				},
				"anyOf": [
					{"required": ["red"]},
					{"required": ["green"]},
					{"required": ["blue"]},
					{"required": ["alpha"]}
				]
			}
		},
		{
			"if": {
				"properties":{"type":{"const":"origins:multiple"}},"required":["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/multiple/"
			},
			"then": {
				"$comment": "We check for vallid properties with `^[a-z0-9/._-]+$`.\nBecause we don't want to match properties already defined we add them to a negative lookahead `(?!)` directly after the start of the string.\nWe also put them in their own group so we can independantly check for the end of the string to allow things like 'conditional' to match while 'condition' won't. `(?!(?:)$)`",
				"patternProperties": {
					"^(?:type|name|description|hidden|condition|loading_priority|badges)$": true,
					"^(?!(?:type|name|description|hidden|condition|loading_priority|badges)$)[a-z0-9/._-]+$": {"$ref": "#"}
				},
				"additionalProperties": false
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:night_vision"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/night_vision/"
			},
			"then": {
				"properties": {
					"strength": {
						"type": "number",
						"description": "How strong the night vision effect is.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:overlay"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/overlay/"
			},
			"then": {
				"properties": {
					"texture": {
						"type": "string",
						"description": "The namespace and ID of the texture to use as an overlay.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$"
					},
					"strength": {
						"type": "number",
						"description": "If the `\"texture\"` draw mode is used, it determines the alpha (transparency) value of the texture. If the `\"nausea\"` draw mode is used, it determines the value of how the texture is stretched (1.0 = screen size).",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"red": {
						"type": "number",
						"description": "Value by which the red component of the texture will be multiplied.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"green": {
						"type": "number",
						"description": "Value by which the green component of the texture will be multiplied.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"blue": {
						"type": "number",
						"description": "Value by which the blue component of the texture will be multiplied.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"draw_mode": {
						"enum": ["nausea", "texture"],
						"description": "Determines whether to treat black as transparent or draw the texture as is (`\"nausea\"` or `\"texture\"` respectively)."
					},
					"draw_phase": {
						"enum": ["below_hud", "above_hud"],
						"description": "Determines if the overlay should render below or above the HUD (\"below_hud\" or \"above_hud\" respectively)."
					},
					"hide_with_hud": {
						"type": "boolean",
						"default": true,
						"description": "Determines if the overlay should be hidden if the HUD elements are hidden (with F1)."
					},
					"visible_in_third_person": {
						"type": "boolean",
						"default": false,
						"description": "Determines if the overlay is visible in third person."
					}
				},
				"required": ["texture", "draw_mode", "draw_phase"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:particle"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/particle/"
			},
			"then": {
				"properties": {
					"particle": {
						"$ref": "#/definitions/origins_data_types/properties/particle_effect",
						"description": "The particle type that will be spawned."
					},
					"frequency": {
						"type": "integer",
						"description": "How often the particles should spawn (interval in ticks).",
						"minimum": 1
					},
					"visible_in_first_person": {
						"type":"boolean",
						"description": "Determines whether the particle should be visible in first person.",
						"default":false
					}
				},
				"required": ["particle", "frequency"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:phasing"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/phasing/"
			},
			"then": {
				"properties": {
					"blacklist": {
						"type": "boolean",
						"description": "If set to true, the `block_condition` will define which blocks the player can NOT move through.",
						"default": false
					},
					"block_condition": {
						"$ref": "#/definitions/conditions/properties/block_condition",
						"description": "If specified, the entity will only be able to move through these blocks (or not be able to move through these, depending on what `blacklist` is set to)."
					},
					"render_type": {
						"description": "Determines how the environment is rendered when \"phasing\" through (moving) blocks. Accepts `\"blindness\"`, `\"remove_blocks\"` or `\"none\"`.",
						"enum": ["remove_blocks", "blindness", "none"],
						"default": "blindness"
					},
					"view_distance": {
						"type": "number",
						"description": "Determines how far the player can look through walls when \"phasing\" (moving) through blocks when `render_type` is set to `\"blindness\"`.",
						"default": 10.0
					},
					"phase_down_condition": {
						"$ref": "#/definitions/conditions/properties/entity_condition",
						"description": "If specified, the entity will only be able to \"phase\" (move) downwards if this condition is fulfilled."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:recipe"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/recipe/"
			},
			"then": {
				"properties": {
					"recipe": {
						"$ref": "#/definitions/origins_data_types/properties/crafting_recipe",
						"description": "The recipe to craft, including an `id` field which can be any arbitrary (but unique) identifier."
					}
				},
				"required": ["recipe"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:resource"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/resource/"
			},
			"then": {
				"properties": {
					"min": {
						"type": "integer",
						"description": "The minimum value of the resource."
					},
					"max": {
						"type": "integer",
						"description": "The maximum value of the resource."
					},
					"hud_render": {"$ref": "#/definitions/origins_data_types/properties/hud_render"},
					"start_value": {
						"type": "integer",
						"description": "The value of the resource when the entity first receives the power. If not set, this will be set to the value of the `min` integer field."
					},
					"min_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If set, this action will be executed on the player whenever the minimum value is reached."
					},
					"max_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If set, this action will be executed on the player whenever the maximum value is reached."
					}
				},
				"required": ["min", "max", "hud_render"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:restrict_armor"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/restrict_armor/"
			},
			"then": {
				"properties": {
					"head": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If specified, items which fulfills this condition cannot be equipped in the head equipment slot."
					},
					"chest": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If specified, items which fulfills this condition cannot be equipped in the chest equipment slot."
					},
					"legs": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If specified, items which fulfills this condition cannot be equipped in the legs equipment slot."
					},
					"feet": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If specified, items which fulfills this condition cannot be equipped in the feet equipment slot."
					}
				},
				"anyOf": [
					{"required": ["head"]},
					{"required": ["chest"]},
					{"required": ["legs"]},
					{"required": ["feet"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:self_glow"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/self_glow/"
			},
			"then": {
				"properties": {
					"entity_condition": {
						"$ref": "#/definitions/conditions/properties/entity_condition",
						"description": "If set, only entities which fulfill this condition will see the entity that has the power glow."
					},
					"bientity_condition": {
						"$ref": "#/definitions/conditions/properties/bientity_condition",
						"description": "If set, only entities which fulfill this bi-entity condition in relation to the entity that has the power will see the entity that has the power glow."
					},
					"use_teams": {
						"type": "boolean",
						"default": true,
						"description": "Whether glowing entities should use their team's color with their glow. If set to false, the entity will instead use the `red`, `green` and `blue` fields within this power type."
					},
					"red": {
						"type": "number",
						"description": "Value by which the red component of the glow will be multiplied.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"green": {
						"type": "number",
						"description": "Value by which the green component of the glow will be multiplied.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"blue": {
						"type": "number",
						"description": "Value by which the blue component of the glow will be multiplied.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:shader"} },
				"required": ["type"]
			},
			"then": {
				"properties": {
					"shader": {
						"type": "string",
						"description": "Specifies the location of the shader resource file to use.\nFor more information about shaders, See https://minecraft.fandom.com/wiki/Shaders/Before_1.9",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:shaders/post/pencil.json"]
					},
					"toggleable": {
						"type":"boolean",
						"description": "Determines if the applied shader can be toggled.",
						"default":true
					}
				},
				"required": ["shader"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:stacking_status_effect"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/stacking_status_effect/"
			},
			"then": {
				"properties": {
					"min_stacks": {
						"type": "integer",
						"description": "The minimum number of stacks. Negative numbers are allowed."
					},
					"max_stacks": {
						"type": "integer",
						"description": "The maximum number of stacks."
					},
					"duration_per_stack": {
						"type": "integer",
						"description": "Determines the duration of the specified status effect(s) for each stack.\nThe actual duration of the specified status effect(s) is determined by the `stacks * duration_per_stack` formula."
					},
					"tick_rate": {
						"type":"integer",
						"description": "Determines how fast the power will gain/lose stacks in ticks.",
						"default":10
					},
					"effect": {
						"$ref": "#/definitions/origins_data_types/properties/status_effect_instance",
						"description": "If specified, this status effect will be applied on the entity that has the power."
					},
					"effects": {
						"type": "array",
						"description": "If specified, these status effects will be applied on the entity that has the power.",
						"items": {"$ref": "#/definitions/origins_data_types/properties/status_effect_instance"},
						"minItems": 1
					}
				},
				"required": ["min_stacks", "max_stacks", "duration_per_stack"],
				"oneOf": [
					{"required": ["effect"]},
					{"required": ["effects"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:starting_equipment"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/starting_equipment/"
			},
			"then": {
				"properties": {
					"stack": {
						"$ref": "#/definitions/origins_data_types/properties/positioned_item_stack",
						"description": "If specified, this item will be given to the player (can be specified in an inventory slot)."
					},
					"stacks": {
						"type": "array",
						"description": "If specified, these items will be given to the player (can be specified in an inventory slot).",
						"items": {"$ref": "#/definitions/origins_data_types/properties/positioned_item_stack"},
						"minItems": 1
					},
					"recurrent": {
						"type":"boolean",
						"default": false,
						"description": "Determines whether the specified item(s) should be given after respawning."
					}
				},
				"oneOf": [
					{"required": ["stack"]},
					{"required": ["stacks"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:status_bar_texture"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/status_bar_texture/"
			},
			"then": {
				"properties": {
					"texture": {
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"description": "The namespace and ID of the sprite sheet to replace the default one with.\nHere's what the vanilla sprite sheet looks like: https://raw.githubusercontent.com/misode/mcmeta/6d496b1a91476c4fdd45fdb093d0319141f9c109/assets/minecraft/textures/gui/icons.png"
					}
				},
				"required": ["texture"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:toggle_night_vision"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/toggle_night_vision/"
			},
			"then": {
				"properties": {
					"active_by_default": {
						"type": "boolean",
						"description": "Whether this power starts in the on or off state.",
						"default": true
					},
					"strength": {
						"type": "number",
						"description": "How strong the night vision effect is.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"key": {
						"$ref": "#/definitions/origins_data_types/properties/key",
						"description": "Which active key this power should respond to.\nIf none is specified, this power will use the primary active power key (by default G).",
						"default": {"key": "key.origins.primary_active"}
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:toggle"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/toggle/"
			},
			"then": {
				"properties": {
					"active_by_default": {
						"type":"boolean",
						"description": "Whether this power starts in the on or off state.",
						"default":true
					},
					"key": {
						"$ref": "#/definitions/origins_data_types/properties/key",
						"description": "Which active key this power should respond to.",
						"default": {"key": "key.origins.primary_active"}
					},
					"retain_state": {
						"type":"boolean",
						"description": "Whether this power switches back to default if the condition is no longer met.",
						"default":true
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:tooltip"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/tooltip/"
			},
			"then": {
				"properties": {
					"item_condition": {
						"$ref":"#/definitions/conditions/properties/item_condition",
						"description": "If specified, the specified tooltip(s) will only apply to items that fulfills this condition."
					},
					"text": {
						"type":"string",
						"description": "If specified, apply this string as a tooltip."
					},
					"texts": {
						"type":"array",
						"items": {"type":"string"},
						"minItems": 1,
						"description": "If specified, apply these strings as a tooltip."
					}
				},
				"oneOf": [
					{"required": ["text"]},
					{"required": ["texts"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:walk_on_fluid"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/walk_on_fluid/"
			},
			"then": {
				"properties": {
					"fluid": {
						"type": "string",
						"description": "The namespace and ID of the fluid tag on which the player should be able to walk onto.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:water", "minecraft:lava"]
					}
				},
				"required": ["fluid"]
			},
			"$comment": "#endregion Regular types"
		},
		{
			"$comment": "#region Action-related",
			"if": {
				"properties": { "type": { "enum": ["origins:action_on_entity_use", "origins:action_on_being_used"] } },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/action_on_being_used/ https://origins.readthedocs.io/en/latest/types/power_types/action_on_entity_use/"
			},
			"then": {
				"properties": {
					"bientity_action": {
						"$ref": "#/definitions/actions/properties/bientity_action",
						"description": "If specified, this action will be executed on either or both 'actor' (player) or 'target' (the entity that's been right-clicked) entity."
					},
					"bientity_condition": {
						"$ref": "#/definitions/conditions/properties/bientity_condition",
						"description": "If specified, only execute the specified actions if this condition is fulfilled by either or both 'actor' (player) or 'target' (the entity that's been right-clicked) entity."
					},
					"item_condition": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If specified, only execute the specified actions if this condition is fulfilled by the item in the 'actor' (player) entity's specified hand(s) determined by the `hands` string array field."
					},
					"hands": {
						"type": "array",
						"items": {"enum": ["off_hand", "main_hand"]},
						"default": ["off_hand", "main_hand"],
						"uniqueItems": true,
						"description": "Determines if the power should be activated if the player used the specified hand(s). Accepts `\"off_hand\"`, `\"main_hand\"` or both."
					},
					"result_stack": {
						"$ref": "#/definitions/origins_data_types/properties/item_stack",
						"description": "If specified, this item will be given to the 'actor' (player) entity."
					},
					"held_item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If specified, this action will be executed on the item used for right-clicking the 'target' entity in the specified hand(s) determined by the `hands` string array field."
					},
					"result_item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If specified, this action will be executed on the item that is given to the 'actor' (player) entity."
					},
					"action_result": {
						"enum": ["consume_partial", "consume", "fail", "pass", "success"],
						"default": "success",
						"description": "Determines the result of the 'use' action."
					}
				},
				"anyOf": [
					{"required": ["entity_action"]},
					{"required": ["block_action"]},
					{"required": ["held_item_action"]},
					{"required": ["result_item_action"]}
				],
				"dependencies": {"result_item_action": ["result_stack"]}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:action_on_block_break"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/action_on_block_break/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If specified, this action will be executed on the player when a block is broken."
					},
					"block_action": {
						"$ref": "#/definitions/actions/properties/block_action",
						"description": "If specified, this action will be executed on the block that is broken."
					},
					"block_condition": {
						"$ref": "#/definitions/conditions/properties/block_condition",
						"description": "If set, the specified actions will only trigger when this block condition is met by the broken block."
					},
					"only_when_harvested": {
						"type": "boolean",
						"description": "If this is true, the specified actions will only execute when the player succeeds in harvesting the block (e.g. they will not trigger when stone is broken by hand).",
						"default": true
					}
				},
				"anyOf": [
					{"required": ["entity_action"]},
					{"required": ["block_action"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:action_on_block_use"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/action_on_block_use/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If specified, this entity action type will be executed if all conditions are met."
					},
					"block_action": {
						"$ref": "#/definitions/actions/properties/block_action",
						"description": "If specified, the used block will run this action if all conditions are met."
					},
					"block_condition": {
						"$ref": "#/definitions/conditions/properties/block_condition",
						"description": "If specified, only execute the specified actions if this condition is fulfilled by the used block."
					},
					"item_condition": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If specified, only execute the specified actions if this condition is fulfilled by the item in the 'actor' (the player that has the power) entity's specified hand(s) determined by the `hands` string field.",
						"default": true
					},
					"directions": {
						"type":"array",
						"items": {"enum": ["north", "east", "south", "west", "up", "down"]},
						"uniqueItems": true,
						"default": ["north", "east", "south", "west", "up", "down"],
						"description": "If specified, only execute the specified actions if you used the specified face of the block."
					},
					"hands": {
						"type": "array",
						"items": {"enum": ["off_hand", "main_hand"]},
						"default": ["off_hand", "main_hand"],
						"uniqueItems": true,
						"description": "Determines if the power should be activated if the player used the specified hand(s). Accepts `\"off_hand\"`, `\"main_hand\"` or both."
					},
					"result_stack": {
						"$ref": "#/definitions/origins_data_types/properties/item_stack",
						"description": "If specified, gives the item to the 'actor' (the player that has the power) entity."
					},
					"held_item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If specified, this action will be executed on the item used for right-clicking the 'target' entity in the specified hand(s) determined by the `hands` string field."
					},
					"result_item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If specified, this action will be executed on the item that is given to the 'actor' (the player that has the power) entity."
					},
					"action_result": {
						"enum": ["consume_partial", "consume", "fail", "pass", "success"],
						"default": "success",
						"description": "Determines the result of the 'use' action."
					}
				},
				"anyOf": [
					{"required": ["entity_action"]},
					{"required": ["block_action"]},
					{"required": ["held_item_action"]},
					{"required": ["result_item_action"]}
				],
				"dependencies": {"result_item_action": ["result_stack"]}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:action_on_callback"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/action_on_callback/"
			},
			"then": {
				"properties": {
					"entity_action_chosen": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If specified, this action will be executed on the player when the player chooses their origin on the last layer through the menu - by using the Orb of Origin or missing an origin or joining for the first time - if the power was gained from any of the layers."
					},
					"execute_chosen_when_orb": {
						"type": "boolean",
						"description": "When this is false, the `entity_action_chosen` will not be executed when the player changes their origin with an orb, but only when the player chooses an origin for the first time or their origin was reset to `origins:empty` via a command.",
						"default": true
					},
					"entity_action_gained": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If specified, this action will be executed on the player when the power is gained."
					},
					"entity_action_lost": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If specified, this action will be executed on the player when the power is lost."
					},
					"entity_action_added": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If specified, this action will be executed on the player when the power is added.\nJoining a world adds each power back."
					},
					"entity_action_removed": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If specified, this action will be executed on the player when the power is removed and right after the player respawns.\nLeaving a world removes each power."
					},
					"entity_action_respawned": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If specified, this action will be executed on the player right after the player respawns, after the `entity_action_removed`."
					}
				},
				"anyOf": [
					{"required": ["entity_action_chosen"]},
					{"required": ["entity_action_gained"]},
					{"required": ["entity_action_lost"]},
					{"required": ["entity_action_added"]},
					{"required": ["entity_action_removed"]},
					{"required": ["entity_action_respawned"]}
				]
			},
			"$comment": "origins:action_on_entity_use is done at origins:action_on_entity_use"
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:action_on_hit"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/action_on_hit/"
			},
			"then": {
				"properties": {
					"bientity_action": {
						"$ref": "#/definitions/actions/properties/bientity_action",
						"description": "The action to be executed on either or both 'actor' (the entity that has the power) and 'target' (the entity/entities that's been hit) entities."
					},
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/damage_condition",
						"description": "If specified, the action will only execute when this condition holds for the damage that was dealt by the 'actor' (the entity that has the power) entity."
					},
					"cooldown": {
						"type": "integer",
						"minimum": 0,
						"default": 1,
						"description": "Interval of ticks this power needs to recharge before the power can be triggered again."
					},
					"hud_render": {
						"$ref": "#/definitions/origins_data_types/properties/hud_render",
						"default": {"should_render":false},
						"description": "Determines how the cooldown of this power is visualized on the HUD."
					},
					"bientity_condition": {
						"$ref": "#/definitions/conditions/properties/bientity_condition",
						"description": "If specified, the action will only execute when this condition is fulfilled by either or both 'actor' (the entity that has the power) and 'target' (the entity/entities that's been hit) entities."
					}
				},
				"required": ["bientity_action"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:action_on_item_use"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/action_on_item_use/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If specified, this action will be executed on the player after they use an item."
					},
					"item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If specified, this action will be executed on the remaining item."
					},
					"item_condition": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If specified, the actions will only execute if this condition is fulfilled by the item before use."
					}
				},
				"anyOf": [
					{"required": ["entity_action"]},
					{"required": ["item_action"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:action_on_land"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/action_on_land/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "The action to execute on the player."
					}
				},
				"required": ["entity_action"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:action_on_wake_up"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/action_on_wake_up/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If specified, this action will be executed on the player when they wake up."
					},
					"block_action": {
						"$ref": "#/definitions/actions/properties/block_action",
						"description": "If specified, this action will be executed on the bed block."
					},
					"block_condition": {
						"$ref": "#/definitions/conditions/properties/block_condition",
						"description": "If specified, the specified actions will only execute if this condition is fulfilled by the bed block."
					}
				},
				"anyOf": [
					{"required": ["entity_action"]},
					{"required": ["block_action"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:action_over_time"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/action_over_time/"
			},
			"then": {
				"properties": {
					"interval": {
						"type": "integer",
						"description": "Interval of ticks between subsequent executions of the specified actions.\nMust be a value of at least 1.",
						"minimum": 1
					},
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "The action to execute on the entity that has the power each interval."
					},
					"rising_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "The action to execute on the first interval tick in which the condition became true."
					},
					"falling_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "The action to execute on the first interval tick in which the condition became false."
					}
				},
				"required": ["interval"],
				"anyOf": [
					{"required": ["entity_action"]},
					{"required": ["rising_action"]},
					{"required": ["falling_action"]}
				],
				"dependencies": {
					"rising_action": ["condition"],
					"falling_action": ["condition"]
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:action_when_damage_taken"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/action_when_damage_taken/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "The action to be executed upon taking damage."
					},
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/damage_condition",
						"description": "If specified, the action will only trigger when this condition holds for the specified type of damage."
					},
					"cooldown": {
						"type": "integer",
						"minimum": 0,
						"description": "Interval of ticks this power needs to recharge before the power can be triggered again."
					},
					"hud_render": {
						"$ref": "#/definitions/origins_data_types/properties/hud_render",
						"default": {"should_render":false},
						"description": "Determines how the cooldown of this power is visualized on the HUD."
					}
				},
				"required": ["entity_action", "cooldown"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:action_when_hit"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/action_when_hit/"
			},
			"then": {
				"properties": {
					"bientity_action": {
						"$ref": "#/definitions/actions/properties/bientity_action",
						"description": "The action to be executed on either or both 'actor' (the attacker entity) entity and 'target' (the entity that has the power) entity."
					},
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/damage_condition",
						"description": "If specified, the specified action will only trigger when this condition holds for the specified type of damage."
					},
					"cooldown": {
						"type": "integer",
						"minimum": 0,
						"default": 1,
						"description": "Interval of ticks this power needs to recharge before the power can be triggered again."
					},
					"hud_render": {
						"$ref": "#/definitions/origins_data_types/properties/hud_render",
						"default": {"should_render": false},
						"description": "Determines how the cooldown of this power is visualized on the HUD."
					},
					"bientity_condition": {
						"$ref": "#/definitions/conditions/properties/bientity_condition",
						"description": "If specified, the specified action will only trigger if this condition is fulfilled by either or both 'actor' (the attacker entity) entity and 'target' (the entity that has the power) entity."
					}
				},
				"required": ["bientity_action"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:active_self"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/active_self/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "The action to execute on the player."
					},
					"cooldown": {
						"type": "integer",
						"description": "Interval of ticks this power needs to recharge before the power can be triggered again.",
						"minimum": 0,
						"default": 1
					},
					"hud_render": {
						"$ref": "#/definitions/origins_data_types/properties/hud_render",
						"default":{"should_render":false},
						"description": "Determines how the cooldown of this power is visualized on the HUD."
					},
					"key": {
						"$ref": "#/definitions/origins_data_types/properties/key",
						"description": "Which active key this power should respond to.",
						"default":{"key":"key.origins.primary_active"}
					}
				},
				"required": ["entity_action"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:attacker_action_when_hit"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/attacker_action_when_hit/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "The action to execute on the attacker."
					},
					"cooldown": {
						"type": "integer",
						"description": "Interval of ticks this power needs to recharge before the power can be triggered again.",
						"minimum": 0,
						"default": 1
					},
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/damage_condition",
						"description": "If set, the action will only trigger when this condition holds for the damage that was dealt by the attacker."
					},
					"hud_render": {
						"$ref": "#/definitions/origins_data_types/properties/hud_render",
						"default":{"should_render":false},
						"description": "If specified, determines how the cooldown of this power is visualized on the HUD."
					}
				},
				"required": ["entity_action", "cooldown"]
			}
		},
		{
			"if": {
				"properties": { "type": { "enum": ["origins:self_action_on_hit", "origins:self_action_on_kill"] } },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/self_action_on_hit/ https://origins.readthedocs.io/en/latest/types/power_types/self_action_on_kill/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "The action to execute on the entity."
					},
					"cooldown": {
						"type": "integer",
						"description": "Interval of ticks this power needs to recharge before the power can be triggered again.",
						"minimum": 0,
						"default": 1
					},
					"hud_render": {
						"$ref": "#/definitions/origins_data_types/properties/hud_render",
						"default":{"should_render":false},
						"description": "If specified, determines how the cooldown of this power is visualized on the HUD."
					},
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/damage_condition",
						"description": "If specified, the specified action will only be executed if the damage dealt is fulfills this condition."
					},
					"target_condition": {
						"$ref": "#/definitions/conditions/properties/entity_condition",
						"description": "If specified, the specified actions will only be executed if the entity/entities that has been hit fulfills this condition."
					}
				},
				"required": ["entity_action"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:self_action_when_hit"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/self_action_when_hit/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "The action to execute on the player."
					},
					"cooldown": {
						"type": "integer",
						"description": "Interval of ticks this power needs to recharge before the power can be triggered again.",
						"minimum": 0,
						"default": 1
					},
					"hud_render": {
						"$ref": "#/definitions/origins_data_types/properties/hud_render",
						"description": "If set, the cooldown of this power is visualized on the HUD in the specified way.",
						"default":{"should_render":false}
					},
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/damage_condition",
						"description": "If specified, the specified action will only execute if the damage taken fulfills this condition."
					}
				},
				"required": ["entity_action"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:target_action_on_hit"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/target_action_on_hit/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "The action to execute on the target."
					},
					"cooldown": {
						"type": "integer",
						"description": "Interval of ticks this power needs to recharge before the power can be triggered again.",
						"minimum": 0,
						"default": 1
					},
					"hud_render": {
						"$ref": "#/definitions/origins_data_types/properties/hud_render",
						"description": "If specified, determines how the cooldown of this power is visualized on the HUD."
					},
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/damage_condition",
						"description": "If specified, the specified action will only execute if the damage dealt by the entity that has the power fulfills this condition."
					},
					"target_condition": {
						"$ref": "#/definitions/conditions/properties/entity_condition",
						"description": "If specified, the specified action will only execute if the entity that has been hit fulfills this condition."
					}
				},
				"required": ["entity_action"]
			},
			"$comment": "#endregion Action-related"
		},
		{
			"$comment": "#region Modifying types",
			"if": {
				"properties": { "type": {"const":"origins:modify_air_speed"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_air_speed/"
			},
			"then": {
				"properties": {
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If specified, this modifier will be applied to the entity's air speed."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will be applied to the entity's air speed.",
						"items": {"$ref": "#/definitions/origins_data_types/properties/modifier"},
						"minItems": 2
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_block_render"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_block_render/"
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "#/definitions/conditions/properties/block_condition",
						"description": "If specified, only modify how the blocks that fulfill this condition would look like."
					},
					"block": {
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"description": "The namespace and ID of the replacement block\nCurrently, this power type does not work properly if you have installed a mod that changes the rendering engine, such as Sodium.\nThis power type does not support a condition. If the condition field is present, it will be ignored."
					}
				},
				"required": ["block"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_break_speed"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_break_speed/"
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "#/definitions/conditions/properties/block_condition",
						"description": "If specified, the modifier(s) will only apply to the blocks that fulfills this condition."
					},
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If specified, this modifier will be applied to the break speed."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will be applied to the break speed.",
						"items": {"$ref": "#/definitions/origins_data_types/properties/modifier"},
						"minItems": 1
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_camera_submersion"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_camera_submersion/"
			},
			"then": {
				"properties": {
					"from": {
						"enum": ["none", "water", "lava"],
						"description": "Which submersion type to modify. Can be none, water or lava."
					},
					"to": {
						"enum": ["none", "water", "lava"],
						"description": "Which submersion type to change to. Can be none, water or lava."
					}
				},
				"anyOf": [
					{"required": ["from"]},
					{"required": ["to"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_crafting"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_crafting/"
			},
			"then": {
				"properties": {
					"recipe": {
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"description": "If specified, modifies the result item of the recipe that matches the specified namespace and ID.\nThis power type cannot modify the result item from recipes added by the Recipe Power Type."
					},
					"item_condition": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If specified, the item from the `result` field and the specified actions will only be applied if this condition is fulfilled by the result item of a recipe."
					},
					"result": {
						"$ref": "#/definitions/origins_data_types/properties/item_stack",
						"description": "If specified, this item will replace the item of a recipe."
					},
					"item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If specified, this action will be executed on the result item of a recipe."
					},
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If specified, this action will be executed on the player upon crafting a recipe."
					},
					"block_action": {
						"$ref": "#/definitions/actions/properties/block_action",
						"description": "If specified, this action will be executed on the block used for crafting a recipe."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_damage_dealt"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_damage_dealt/"
			},
			"then": {
				"properties": {
					"bientity_condition": {
						"$ref": "#/definitions/conditions/properties/bientity_condition",
						"description": "If specified, the specified modifier(s) and/or action(s) will only apply if either or both 'actor' (the entity that has the power) and 'target' (the entity that has been hit) fulfills this bi-entity condition type."
					},
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/damage_condition",
						"description": "If specified, the specified modifier(s) and/or action(s) will only apply if the dealt damage fulfills this condition."
					},
					"target_condition": {
						"$ref": "#/definitions/conditions/properties/entity_condition",
						"description": "If specified, the specified modifier(s) and action(s) will only be applied if the entity/entities that has been hit fulfills this condition."
					},
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If specified, this modifier will apply to the damage amount."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will apply to the damage amount.",
						"items": {"$ref": "#/definitions/origins_data_types/properties/modifier"},
						"minItems": 1
					},
					"bientity_action": {
						"$ref": "#/definitions/actions/properties/bientity_action",
						"description": "If specified, this bi-entity action type will be executed on either or both 'actor' (the entity that has the power) and 'target' (the entity that has been hit)."
					},
					"self_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If specified, this action will be executed on the entity that has the power whenever the modifier(s) is applied."
					},
					"target_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If specified, this action will be executed on the entity/entities that has been hit whenever the modifier(s) is applied."
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_damage_taken"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_damage_taken/"
			},
			"then": {
				"properties": {
					"bientity_condition": {
						"$ref": "#/definitions/conditions/properties/bientity_condition",
						"description": "If specified, the specified modifier(s) and/or action(s) will only apply if either or both 'actor' (the attacker) and 'target' (the entity that has the power) fulfills this bi-entity condition type."
					},
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/damage_condition",
						"description": "If specified, the specified modifiers(s) and/or action(s) will only apply if the taken damage fulfills this condition."
					},
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If specified, this modifier will apply to the damage amount."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will apply to the damage amount.",
						"items": {"$ref": "#/definitions/origins_data_types/properties/modifier"},
						"minItems": 1
					},
					"bientity_action": {
						"$ref": "#/definitions/actions/properties/bientity_action",
						"description": "If specified, this bi-entity action type will be executed on either or both 'actor' (the attacker) and 'target' (the entity that has the power)."
					},
					"self_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If specified, this action will be executed on the entity that has the power whenever the modifier(s) is applied."
					},
					"attacker_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If specified, this action will be executed on the entity/entities that has been hit whenever the modifier(s) is applied."
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_exhaustion"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_exhaustion/"
			},
			"then": {
				"properties": {
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If specified, this modifier will be applied to the received exhaustion amount."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will be applied to the received exhaustion amount.",
						"items": {"$ref": "#/definitions/origins_data_types/properties/modifier"},
						"minItems": 1
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_falling"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_falling/"
			},
			"then": {
				"properties": {
					"velocity": {
						"type": "number",
						"description": "Determines the speed of the falling velocity.\nBy default, the player falls at a speed of 0.08, or 0.01 if a slow falling potion is active."
					},
					"take_fall_damage": {
						"type": "boolean",
						"description": "Determines whether the entity should take fall damage or not.",
						"default": true
					}
				},
				"required": ["velocity"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_fluid_render"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_fluid_render/"
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "#/definitions/conditions/properties/block_condition",
						"description": "If specified, only modify how the blocks that fulfills this condition would look like."
					},
					"fluid_condition": {
						"$ref": "#/definitions/conditions/properties/fluid_condition",
						"description": "If specified, only modify how the fluids that fulfills this condition would look like."
					},
					"fluid": {
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"description": "The namespace and ID of the replacement fluid.",
						"examples": ["minecraft:water", "minecraft:lava"]
					}
				},
				"required": ["fluid"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_food"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_food/"
			},
			"then": {
				"properties": {
					"item_condition": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If specified, the specified actions and modifier(s) will only apply to food items that fulfills this condition."
					},
					"item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If specified, this item action type will be executed on the remaining item stacks that was consumed."
					},
					"replace_stack": {
						"$ref": "#/definitions/origins_data_types/properties/item_stack",
						"description": "If specified, this item stack will replace the item stack that was consumed after consuming it."
					},
					"food_modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If specified, this modifier will apply to the food amount gained by eating a food item."
					},
					"food_modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will apply to the food amount gained by eating a food item.",
						"items": {"$ref": "#/definitions/origins_data_types/properties/modifier"},
						"minItems": 1
					},
					"saturation_modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If specified, this modifier will apply to the saturation amount gained by eating a food item."
					},
					"saturation_modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will apply to the saturation amount gained by eating a food item.",
						"items": {"$ref": "#/definitions/origins_data_types/properties/modifier"},
						"minItems": 1
					},
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If specified, this action will be executed on the player that has ate a food item."
					},
					"always_edible": {
						"type":"boolean",
						"description": "Determines whether a food item can be eaten regardless of the player's hunger bar being full.",
						"default":false
					},
					"prevent_effects": {
						"type":"boolean",
						"description": "If set to `true`, prevent status effects from being applied.",
						"default":false
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_harvest"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_harvest/"
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "#/definitions/conditions/properties/block_condition",
						"description": "If set, the modification will only apply to blocks which satisfy this condition."
					},
					"allow": {
						"type": "boolean",
						"description": "When true, the player will be able to harvest the blocks. When false, the player will not be able to harvest the blocks."
					}
				},
				"required": ["allow"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_jump"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_jump/"
			},
			"then": {
				"properties": {
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If specified, this modifier will be applied to the upwards velocity."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will be applied to the upwards velocity.",
						"items": {"$ref": "#/definitions/origins_data_types/properties/modifier"},
						"minItems": 1
					},
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If specified, this action will be executed on the entity that has the power whenever the entity jumps."
					}
				},
				"not": {"required": ["modifier", "modifiers"]},
				"anyOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]},
					{"required": ["entity_action"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const": "origins:modify_lava_speed"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_lava_speed/"
			},
			"then": {
				"properties": {
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If specified, this modifier will be applied to the movement speed while in lava."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will be applied to the movement speed while in lava.",
						"items": {"$ref": "#/definitions/origins_data_types/properties/modifier"},
						"minItems": 1
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const": "origins:modify_player_spawn"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_player_spawn/"
			},
			"then": {
				"properties": {
					"dimension": {
						"type": "string",
						"description": "The namespace and ID of the dimension the player should spawn in.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:overworld", "minecraft:the_nether", "minecraft:the_end"]
					},
					"biome": {
						"type": "string",
						"description": "If specified, the player will only spawn in the biome that matches the specified namespace and ID.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:savanna"]
					},
					"structure": {
						"type": "string",
						"description": "If specified, the player will only spawn in the specified namespace and ID of the structure.\nThe structure needs to generate in the specified dimension!\nKeep in mind that structure location is costly and it might take one or two seconds before the player gets teleported when choosing the power.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:endcity"]
					},
					"spawn_strategy": {
						"type": "string",
						"description": "Determines whether the player should spawn near the world spawnpoint (0, 0) of the dimension (`\"center\"`) or near the coordinates of the Overworld spawnpoint (whilst considering the value of the `dimension_distance_multiplier` field) (`\"default\"`).",
						"enum": ["default", "center"],
						"default": "default"
					},
					"dimension_distance_multiplier": {
						"type": "number",
						"description": "Defines the ratio of Overworld blocks to blocks in the specified dimension.\ne.g: for The Nether dimension, this would be set to `0.125`.\nThis needs to be set when `spawn_strategy` is set to `\"default\"`!",
						"examples": [1, 0.125]
					}
				},
				"required": ["dimension"],
				"if": {
					"properties": { "spawn_strategy": {"const": "default"} },
					"required": ["spawn_strategy"]
				},
				"then": {
					"required": ["dimension_distance_multiplier"]
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_projectile_damage"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_projectile_damage/"
			},
			"then": {
				"properties": {
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/damage_condition",
						"description": "If specified, the specified modifier(s) and action(s) will only apply if the dealt damage fulfills by this condition.",
						"examples": [{"type": "origins:projectile", "projectile": "minecraft:spectral_arrow"}]
					},
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If specified, this modifier will apply to the damage amount."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will apply to the damage amount.",
						"items": {"$ref":"#/definitions/origins_data_types/properties/modifier"},
						"minItems": 1
					},
					"target_condition": {
						"$ref": "#/definitions/conditions/properties/entity_condition",
						"description": "If specified, the specified modifier(s) and action(s) will only apply if the the entity that has been hit fulfills this condition."
					},
					"self_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If specified, this action will be executed on the 'actor' entity (the entity that has the power) whenever the modifier(s) are applied."
					},
					"target_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If specified, this action will be executed on the the entity that has been hit whenever the modifier(s) are applied."
					}
				},
				"anyOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]},
					{"required": ["self_action"]},
					{"required": ["target_action"]}
				],
				"not": {"required": ["modifier", "modifiers"]}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_slipperiness"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_slipperiness/"
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "#/definitions/conditions/properties/block_condition",
						"description": "If specified, the modifier(s) will only apply to the blocks that fulfills this condition."
					},
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If specified, this modifier will be applied to the entity's slipperiness."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will be applied to the entity's slipperiness.",
						"items": {"$ref": "#/definitions/origins_data_types/properties/modifier"},
						"minItems": 1
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"enum":["origins:modify_status_effect_amplifier", "origins:modify_status_effect_duration"]} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_status_effect_amplifier/ https://origins.readthedocs.io/en/latest/types/power_types/modify_status_effect_duration/"
			},
			"then": {
				"properties": {
					"status_effect": {
						"type":"string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"description": "The namespace and ID of the status effect that will have its amplifier/duration modified."
					},
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "The modifier to apply to the amplifier/duration of the specified status effect."
					}
				},
				"required": ["status_effect", "modifier"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_swim_speed"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_swim_speed/"
			},
			"then": {
				"properties": {
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If specified, this modifier will apply to the swim speed."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will apply to the swim speed.",
						"items": {"$ref": "#/definitions/origins_data_types/properties/modifier"},
						"minItems": 1
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_xp_gain"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_xp_gain/"
			},
			"then": {
				"properties": {
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If specified, this modifier will apply to the experience gained."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will apply to the experience gained.",
						"items": {"$ref": "#/definitions/origins_data_types/properties/modifier"},
						"minItems": 1
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			},
			"$comment": "#endregion Modifying types"
		},
		{
			"$comment": "#region Preventing types",
			"if": {
				"properties": { "type": {"const":"origins:prevent_being_used"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/prevent_being_used/"
			},
			"then": {
				"properties": {
					"bientity_action": {
						"$ref": "#/definitions/actions/properties/bientity_action",
						"description": "If specified, this action will be executed on either or both 'actor' (player) or 'target' (the entity that has the power) entities."
					},
					"bientity_condition": {
						"$ref": "#/definitions/conditions/properties/bientity_condition",
						"description": "If specified, only execute the specified actions if this condition is fulfilled by either or both 'actor' (player) or 'target' (the entity that has the power) entities."
					},
					"item_condition": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If specified, only execute the specified actions if this condition is fulfilled by the item in the 'actor' (player) entity's specified hand(s) determined by the `hands` string array field."
					},
					"hands": {
						"type": "array",
						"description": "Determines if the power should be activated if the 'actor' (player) entity used the specified hand(s).\nAccepts `\"off_hand\"`, `\"main_hand\"` or both.",
						"items": {"enum": ["off_hand", "main_hand"]},
						"uniqueItems": true,
						"default": ["off_hand", "main_hand"]
					},
					"result_stack": {
						"$ref": "#/definitions/origins_data_types/properties/item_stack",
						"description": "If specified, this item will be given to the 'actor' (player) entity."
					},
					"held_item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If specified, this action will be executed on the item used for right-clicking the 'target' (the entity that has the power) entity in the 'actor' (player) entity's specified hand(s) determined by the `hands` string array field."
					},
					"result_item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If specified, this action will be executed on the item that is given to the 'actor' (player) entity."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"enum":["origins:prevent_block_selection", "origins:prevent_block_use"]} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/prevent_block_selection/ https://origins.readthedocs.io/en/latest/types/power_types/prevent_block_use/"
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "#/definitions/conditions/properties/block_condition",
						"description": "If specified, only blocks that fulfil this condition are affected."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:prevent_death"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/prevent_death/"
			},
			"then": {
				"properties": {
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/damage_condition",
						"description": "If specified, death will only be prevented if the damage dealt to the entity fulfills this condition."
					},
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If specified, this action will be executed on the entity when death is prevented."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:prevent_elytra_flight"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/prevent_elytra_flight/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If specified, execute this entity action type upon preventing the entity that has the power."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:prevent_entity_collision"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/prevent_entity_collision/"
			},
			"then": {
				"properties": {
					"bientity_condition": {
						"$ref": "#/definitions/conditions/properties/bientity_condition",
						"description": "If specified, collision is only affected as long as both the 'actor' (the entity with the power), and the 'target' fulfill the specified conditions."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:prevent_entity_render"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/prevent_entity_render/"
			},
			"then": {
				"properties": {
					"entity_condition": {
						"$ref": "#/definitions/conditions/properties/entity_condition",
						"description": "If specified, only entities which fulfills this condition will be affected."
					},
					"bientity_condition": {
						"$ref": "#/definitions/conditions/properties/bientity_condition",
						"description": "If specified, the power will only be active if this condition is fulfilled by either or both the 'actor' (the player that has the power) and 'target' (the entity that will not render) entities."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:prevent_entity_use"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/prevent_entity_use/"
			},
			"then": {
				"properties": {
					"bientity_action": {
						"$ref": "#/definitions/actions/properties/bientity_action",
						"description": "If specified, this action will be executed on either or both 'actor' (the player that has the power) or 'target' (the entity that is right-clicked) entities."
					},
					"bientity_condition": {
						"$ref": "#/definitions/conditions/properties/bientity_condition",
						"description": "If specified, only execute the specified actions if this condition is fulfilled by either or both 'actor' (the player that has the power) or 'target' (the entity that is right-clicked) entities."
					},
					"item_condition": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If specified, only execute the specified actions if this condition is fulfilled by the item in the 'actor' (the player that has the power) entity's specified hand(s) determined by the `hands` string array field."
					},
					"hands": {
						"type": "array",
						"description": "Determines if the power should be activated if the 'actor' (the player that has the power) entity used the specified hand(s). Accepts `\"off_hand\"`, `\"main_hand\"` or both.",
						"items": {"enum": ["off_hand", "main_hand"]},
						"uniqueItems": true,
						"default": ["off_hand", "main_hand"]
					},
					"result_stack": {
						"$ref": "#/definitions/origins_data_types/properties/item_stack",
						"description": "If specified, this item will be given to the 'actor' (the player that has the power) entity."
					},
					"held_item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If specified, this action will be executed on the item used for right-clicking the 'target' (the entity that is right-clicked) entity in the 'actor' (the player that has the power) entity's specified hand(s) determined by the `hands` string array field."
					},
					"result_item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If specified, this action will be executed on the item that is given to the 'actor' (the player that has the power) entity."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:prevent_feature_render"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/prevent_feature_render/"
			},
			"then": {
				"properties": {
					"feature": {
						"enum": [
							"armor", "cape", "cat_collar", "deadmau5", "dolphin_held_item", "drowned_overlay", "elytra", "enderman_block",
							"energy_swirl_overlay", "eyes", "fox_held_item", "head", "held_item", "horse_armor", "horse_marking", "iron_golem_crack",
							"iron_golem_flower", "llama_decor", "mooshroom_mushroom", "panda_held_item", "saddle", "sheep_wool", "shoulder_parrot",
							"shulker_head", "slime_overlay", "snowman_pumpkin", "stray_overlay", "stuck_objects", "trident_riptide",
							"tropical_fish_color", "villager_clothing", "villager_held_item", "wolf_collar"
						],
						"description": "If specified, this feature renderer will not be rendered."
					},
					"features": {
						"type": "array",
						"description": "If specified, these feature renderers will not be rendered.",
						"items": {
							"enum": [
								"armor", "cape", "cat_collar", "deadmau5", "dolphin_held_item", "drowned_overlay", "elytra", "enderman_block",
								"energy_swirl_overlay", "eyes", "fox_held_item", "head", "held_item", "horse_armor", "horse_marking",
								"iron_golem_crack", "iron_golem_flower", "llama_decor", "mooshroom_mushroom", "panda_held_item", "saddle",
								"sheep_wool", "shoulder_parrot", "shulker_head", "slime_overlay", "snowman_pumpkin", "stray_overlay", "stuck_objects",
								"trident_riptide", "tropical_fish_color", "villager_clothing", "villager_held_item", "wolf_collar"
							]
						},
						"uniqueItems": true,
						"minItems": 1
					}
				},
				"oneOf": [
					{"required": ["feature"]},
					{"required": ["features"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:prevent_game_event"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/prevent_game_event/"
			},
			"then": {
				"properties": {
					"event": {
						"type":"string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"description": "If specified, the game event with this namespace and ID will be prevent from being emitted by the entity.",
						"examples": ["minecraft:hit_ground"]
					},
					"events": {
						"type": "array",
						"description": "If specified, the game events with these namespace and IDs will be prevent from being emitted by the entity.",
						"items": {
							"type":"string",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
							"examples": ["minecraft:hit_ground"]
						},
						"uniqueItems": true,
						"minItems": 1
					},
					"tag": {
						"type":"string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"description": "If specified, the game events inside game event tag will be prevented from being emitted by the entity."
					},
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If specified, this action will be executed on the entity upon preventing game events."
					}
				},
				"not": {"required": ["event", "events"]}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:prevent_item_use"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/prevent_item_use/"
			},
			"then": {
				"properties": {
					"item_condition": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If specified, only items that fulfills this condition will be prevented from being used."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:prevent_sleep"} },
				"required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/prevent_sleep/"
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "#/definitions/conditions/properties/block_condition",
						"description": "If specified, sleep will only be prevented if this condition is fulfilled by the bed block."
					},
					"message": {
						"type": "string",
						"description": "The message that will be shown when sleep is prevented this way. Can be a literal text or a translation key which will be localized using a language file.",
						"default": "origins.cant_sleep"
					},
					"set_spawn_point": {
						"type": "boolean",
						"description": "Determines whether the spawnpoint of the player is set upon right-clicking a bed while being prevented. (similar to what happens when you right-click a bed while it's daytime)",
						"default": false
					}
				}
			},
			"$comment": "#endregion Preventing types"
		}
	]
}